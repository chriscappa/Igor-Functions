#pragma rtGlobals=1		// Use modern global access method.
#pragma version=1	.0	// to help with version control

//#include "2015GeneralMacros"			//  should reside somewhere in the Igor Pro Folder/User Procedures folder

// *************************************************
//	2015IcarttFormat.ipf
//	Author:Donna Sueper
//	Most Recently Revised by: :Donna Sueper
//	Master Keeper: Ken Aikin
//	Revision Number: 1.00
//	Revision Date: Feb 19, 2015
//	Revision Notes:  

//	1.00	Same as 2013IcarttFormat. Fix bug in Load_ChangeMissingDoDate1001() that always assumed that first column was time, which isn't the case when user chooses 'skip column' if there are waves with same name (such as timewave already loaded).
//			20150219 KA

// *************************************************
// These functions create and load data files of the format indicated in the 2008 ICARTT Data
// Management Plan document, which was roughly based on the Haines-Hipskind NASA Ames Format.
// Functions and macros herein are not appropriate for all
// data generated by ICARTT participants; assumptions are outlined below.
//
// Functions in this file use functions in the 2015 GeneralMacros (latest version) igor procedure file.
// Users should have both files open in an igor experiment.
//
// Whenever a user loads or creates a ICARTT format file, an igor data folder called
// ICARTTFileFormat gets created in the experiment and most of the work is done here.
// If something goes awry, the user can reset the data folder to root (most everyone's default)
// by inserting the text below (less the //) into the command line
// SetDataFolder root:
//
// Some parameters are calculated; some have simple default values.  They are:
// NumHeaderLines - gets calculated
// FileFormatType = 1001 // this value is assumed for reading and creating files.
// FileVolumeNumber = 1 // this value is assumed for reading and creating files.
// TotalVolumeNumber = 1 // this value is assumed for reading and creating files.
// UTCDataStart - set from selected time wave
// NumVariables - gets set when user selects waves
// ScaleFactor = 1 // this value is assumed for reading and creating files.
// MissingDataIndicator = -9999 // NOTE - The same missing value is used for all parameters when creating a file.
// NumSpecialCommentLines - gets calculated
// NumNormalCommentLines - gets calculated
// Normal Comments are the concatenation of several other parameters
//
// None of the original waves in the experiment are modified in any way.
// Waves selected to be saved are duplicated in the ICARTTFileFormat data folder.  
// The UTC timewave (the independent parameter) and any dependent parameters formatted with a "t" (from the create panel)
// will have the starting date subtracted from it (in the created file) and will be formatted with one digit after the decimal.
// 
// When loading an icartt file into an experiment, the missing value as reported in the header will be used
// to convert missing values in the incoming waves to nans.  The independent variable (time) will have the
// UTC date (as indicated in the header) added to it.
// 
// When loading data from the LoadDataOnly menu item, almost no format checking is done and missing data isn't changed to nans.
//
// The name of the wave in the experiment will be the name given to the dependent and independent parameters, with the
// exception of matricies, where column names much as mymatrix0, mymatrix1, etc are used.
//
//  If anything is named in the experiment in a 'liberal' fashion (i.e. wave names with spaces), all bets are off.
//
//  Users should be aware that there are opearting system differences for end of line designations.
//  Mac uses carriage return (CR), Unix uses line feed (LF), and Windows use carriage return + line feed (CRLF)
//  For icarrtt, the preferred end of line designation is CRLF (which correspondes to \r\n in the code). 
// *************************************************

// *************************************************
Menu "ICARTTFormat"
	"-"
	"CreateICARTT1001"
	"LoadICARTT1001"
	"LoadICARTTDataOnly1001"
	"Go to Icartt Panel",   IcarttPanel_CreatePanel();
	"-"
End


// *************************************************
// Creates all the global waves, variables and strings all the other functions need execpt those specific to the icartt panel.
// Sets default values for many of the parameters.
// This function should be called before any loading or creating of ICARTT files is done.

Function Icartt_CreateGlobals()

	string  getFolderStr

	getFolderStr = GetDataFolder(1)
	
	string currentTimeStr = time2yyyymmddhhmmss(DateTime)
	
	NewDataFolder/O/S root:ICARTTFileFormat

	string/g RadioValStr = ""
	string/g FileNameStr = "DataID_xxx_20yymmdd_RA.ict"// 1.32A "DataID_NP3_2010mmdd_RA.ict"
	string/g FileNameStr4Macs = ""  // igor for Mac does not handle long file names gracefully. 
	string/g MergedSuffixStr = ""  // is "All1SecMerged" or some such for merged files

	variable/g NumHeaderLinesVar
	string/g FileFormatTypeStr = "1001"

	string/g PINameStr
	string/g PIAffiliationStr = "Institution Name" 	// 1.32A "NOAA Chemical Sciences Division"
	string/g DataSourceDescriptionStr = "xx Instrument "
	string/g MissionNameStr = "Project Name" // 1.32A "CalNex 2010"
	variable/g FileVolumeNumberVar = 1
	variable/g TotalVolumeNumberVar = 1

	string /g UTCDataStartStr		// has spaces and commas!
	variable/g UTCDataStartVar
	string/g UTCRevisionDateStr = currentTimeStr[0,3]+ ", "+ currentTimeStr[4,5]+ ", "+ currentTimeStr[6,7] // has spaces!
	variable/g DataIntervalVar = 1

	string/g IndependentVariableNameStr
	variable/g NumVariablesVar
	variable/g ScaleFactorVar = 1
	variable/g MissingDataIndicatorVar = -9999
	string/g VariableNamesList

	variable/g NumSpecialCommentLinesVar
	string/g SpecialCommentsStr

	variable/g NumNormalCommentLinesVar
	string/g NormalCommentsStr
	
	string/g PIContactInfoStr = "Address: "// 1.32A  "Address: NOAA Chemical Sciences Division, Mail Stop ESRL/CSD7, 325 Broadway, Boulder, CO 80305"
	string/g PlatformSiteInfoStr = "Platform: " //1.32A "NOAA WP-3D / NOAA RV Ronald H. Brown"
	string/g LocationInfoStr = "Location: " // 1.32A "The aircraft/ship was stationed in. Location data is in AircraftPos/RHBPos file."
	string/g AssociatedFileNamesStr = "N/A"
	string/g InstrumentInfoStr = "N/A"
	string/g DataInfoStr = "Units:"
	string/g UncertaintyInfoStr = "N/A"

	variable/g ULODFlagVar = -7777
	string/g ULODValueStr = "N/A"
	variable/g LLODFlagVar = -8888
	string/g LLODValueStr = "N/A"

	string/g DataManagerContactInfoStr = "Data Manager:"// 1.32A  "Ken Aikin; kenneth.c.aikin@noaa.gov"
	string/g ProjectInfoStr = "Project Info: "//1.32A  "Dates of Study."
	string/g StipulationsOnUseStr = "Use of these data require prior ok from PI."

	string/g OtherCommentsStr = "N/A"
	variable/g NumOtherCommentsVar

	string/g RevisionNumberStr = "A"		// prelim data designation
	string/g RevisionStr = "RA: Preliminary Data.  For in-field use only."
		
	variable/g FileOpenAfterCreateVar
	
//	variable/g FormatAsInTopTableVar 	// obsolete
//	variable/g IsMatrixData		// obsolete
//	string/g MatrixColNameList 	// obsolete
	killVariables/z root:ICARTTFileFormat:FormatAsInTopTableVar	
	killVariables/z root:ICARTTFileFormat:IsMatrixData	
	killStrings/z root:ICARTTFileFormat:MatrixColNameList	
	
	string/g TableNameStr
	string/g IndependentVariableFormatStr
	string/g UnitsList
	string/g OptionalDecripList

	killVariables/z root:ICARTTFileFormat:ExponFormatVar	
//	variable/g ExponFormatVar = 5   // the default number of digits to be saved when using the exponential format
 
// 	string/g MyTempStr			// for reordering waves in list
//	make/o/t/n=0 TempTextWave			// for reordering waves in list		
	killStrings/z root:ICARTTFileFormat:MyTempStr	
	killWaves/z root:ICARTTFileFormat:TempTextWave	

	string myparamlist=""	
	myparamlist += "FileName;NumHeaderLines_FileType;PIName;PIAffiliation;DataSourceDescription;MissionName;FileVolNum_TotalVolNum;UTCDataStart_RevDate;DataInterval;"
	myparamlist += "IndependentVariableName;NumVariables;ScaleFactor;MissingDataIndicator;VariableNames;NumSpecialCommentLines;SpecialComments;"
	myparamlist += "NumNormalCommentLines;NormalComments;PIContactInfo;PlatformSiteInfo;LocationInfo;AssociatedFileNames;InstrumentInfo;DataInfo;"
	myparamlist += "Uncertainty;ULODFlag;ULODValue;LLODFlag;LLODValue;DMContactInfo;ProjectInfo;StipulationsOnUse;OtherComments;RevisionNumber;Rev;ColumnTitles;"

	make/o/t/n=(ItemsInList(myparamlist)) ICARTTHeaderParam, ICARTTHeaderValue
	List2TextWaveNoCreate(myparamlist, ICARTTHeaderParam)
	
	make/o/t/n=4 root:ICARTTFileFormat:TitleWaveMatrix = {"format", "wave", "units", "optional long description"}

	wave/z/t WaveListTextWaveMatrix
	if (!WaveExists(WaveListTextWaveMatrix))
		make/t/o/n=(0) WaveListTextWave		// for ListBox 
		make/t/o/n=(0,4) WaveListTextWaveMatrix		//  ListBox; 1st Column is # of decimal place, 2nd is for names
		make/o/n=(0,4) SelWaveMatrix		// used with ListBox	
	endif
	
	killwaves/z WaveListTextWave
	
	SetDataFolder getFolderStr
	
End


// *************************************************
// Makes sure that the format for UTCDateStr is or can be interpretted nicely to yyyy mm dd.
// Also makes sure time is reasonable, after 1980, an arbitrary default.

Function Icartt_CheckUTCDateStr(UTCDateStr, [RevDateFlag])				// 2.13 modification
	String UTCDateStr
	variable RevDateFlag

	variable UTCTime
	string tempDateStr
	
	tempDateStr =   RemoveDoubleSpaces(RemoveCarriageReturns(UTCDateStr))
	tempDateStr = Icartt_TeaseOutDate(tempDateStr, 0)		// adds commas!
	
	if (strlen(tempDateStr)<10)	//have to allow for optional spaces between commas, so can't just give it a fixed length.
		Abort "The string length of the time "+UTCDateStr+" shouldn't be<10 (yyyy, mm, dd) - Aborting from Icartt_CheckUTCDateStr"
	endif
	
	UTCTime =  yyyymmddhhmmss2time(tempDateStr[0,3]+tempDateStr[6,7]+tempDateStr[10,11] + "000000")
	if ( UTCTime < date2secs(1980,1,1)  )
		Abort "The string "+UTCDateStr+"indicates a time before 1980; is something wrong? - Aborting from Icartt_CheckUTCDateStr"
	endif

	if ( UTCTime > date2secs(2500,1,1)  )
		Abort "The string "+UTCDateStr+"indicates a time after 2500; is something wrong? - Aborting from Icartt_CheckUTCDateStr"
	endif

	if (!ParamisDefault(RevDateFlag) && RevDateFlag)		//2.13 check the revision date is the current date
		variable now = DateTime
		if (UTCTime != now-mod(now,86400) )
			DoAlert, 1, "The revision date and the current date do not match.  Would you like to change the revision date to the current date and continue?"
			if (V_flag==1)
				SVAR UTCRevisionDateStr  =root:ICARTTFileFormat:UTCRevisionDateStr
				string UTCTimeTemp=time2yyyymmddhhmmss(now)
				UTCRevisionDateStr = UTCTimeTemp[0,3]+", "+ UTCTimeTemp[4,5]+", "+ UTCTimeTemp[6,7] 
				else
				abort "The user chose to abort  - Aborting from Icartt_CheckUTCDateStr"
			endif
		endif
	endif

End


// *************************************************
// Checks the revision portion of the file name.

Function Icartt_CheckRevStr()

	SVAR FileNameStr = root:ICARTTFileFormat:FileNameStr
	
	string fileNameRevStr 
	variable pos1, pos2, pos3, pos4, pos5, n
	
	//  assumes file name of the form DataID_platform_yyyymmdd_Rx_mergeorother.ict
	
	pos1 = strsearch(FileNameStr, "_", 0 )				// identifies DataID_platform
	pos2 = strsearch(FileNameStr, "_", pos1+1)		// identifies platform_yyyymmdd
	pos3 = strsearch(FileNameStr, "_", pos2+1)		// identifies yyyymmdd_Rx
	pos4 = strsearch(FileNameStr, "_", pos3+1)		// identifies Rx_mergeorother if it exists
	pos5 = strsearch(FileNameStr, ".", 0)				// identifies.ict
	
	if (cmpstr(lowerstr(FileNameStr[pos3+1]), "r")!=0  )
		Abort "There isn't a \"_Rnumber\" in the file name; it was expected after "+FileNameStr[0, pos3]+".  Please check the file name. - Aborting from Icartt_CheckRevStrSetNumber"
	endif

	fileNameRevStr=FileNameStr[pos3+1, max(pos4, pos5)-1 ]			// assumes revision numbers are only one character
	
	if (strlen(fileNameRevStr)<=0)
		Abort "There isn't a \"_R#\" in the file name; saw "+fileNameRevStr + " instead - Aborting from Icartt_CheckRevStrSetNumber"
	endif
	
End


// *************************************************
// Checks to see if the date in the filename matched the UTCDataStartVar parameter.

Function Icartt_CheckHeaderDate()
		
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR UTCDataStartStr = root:ICARTTFileFormat:UTCDataStartStr
	SVAR FileNameStr= root:ICARTTFileFormat:FileNameStr

	string str
	variable strTime, pos1, pos2, pos3, pos4, pos5
		
	//  assumes file name of the form DataID_platform_yyyymmdd_Rx_possibleMergeOrOther.ict
	
	pos1 = strsearch(FileNameStr, "_", 0 )				// identifies DataID_platform
	pos2 = strsearch(FileNameStr, "_", pos1+1)		// identifies platform_yyyymmdd
	pos3 = strsearch(FileNameStr, "_", pos2+1)		// identifies yyyymmdd_Rx
	pos4 = strsearch(FileNameStr, "_", pos3+1)		// identifies Rx_mergeorother if it exists
	pos5 = strsearch(FileNameStr, ".", 0)				// identifies.ict

	str = FileNameStr[pos2+1, pos3-1]	// UTCDataStart
	
	strTime = yyyymmddhhmmss2time(str+"000000")

	if (strTime!=UTCDataStartVar)
		Abort "The date in the file name "+str+" does not match the UTCDataStart value from the independent parameter "+ReplaceString(" ", UTCDataStartStr ,"")+ " - Aborting from Icartt_CheckHeaderDate"
	endif

End


// *************************************************
// Checks to see if the date in the filename contains illegal chars and if we are dealing with a merged data set.
Function Icartt_CheckFileNameStr()
	
	SVAR FileNameStr= root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs= root:ICARTTFileFormat:FileNameStr4Macs
	SVAR MergedSuffixStr = root:ICARTTFileFormat:MergedSuffixStr

	string str, cmd
	variable pos1, pos2, pos3, pos4, pos5, i, j, n

	n = strlen(FileNameStr)
	if (n==0)
		Abort "Please enter a valid filename - Aborting from Icartt_CheckFileNameStr"
	endif
	
	for(i=0;i<n;i+=1)
		j = strsearch("abcdefghijklmnopqrstuvwxyz0123456789.-_", lowerStr(FileNameStr[i]), 0) 
		if (j<0)
			Abort "The filename "+FileNameStr+"contains "+FileNameStr[i]+" Only alphanumeric and .-_ are allowed - Aborting from Icartt_CheckFileNameStr"
		endif
	endfor

	if ( cmpstr(".ict", LowerStr(FileNameStr[strlen(FileNameStr)-4, strlen(FileNameStr)-1])) !=0 )
		Abort "The filename "+FileNameStr+"must end with a \".ict\" - Aborting from Icartt_CheckFileNameStr"
	endif

	//  assumes file name of the form DataID_platform_yyyymmdd_Rx_mergeorother.ict
	
	pos1 = strsearch(FileNameStr, "_", 0 )				// identifies DataID_platform
	pos2 = strsearch(FileNameStr, "_", pos1+1)		// identifies platform_yyyymmdd
	pos3 = strsearch(FileNameStr, "_", pos2+1)		// identifies yyyymmdd_Rx
	pos4 = strsearch(FileNameStr, "_", pos3+1)		// identifies Rx_mergeorother if it exists
	pos5 = strsearch(FileNameStr, ".", 0)				// identifies.ict

	str = FileNameStr[pos4+1, pos5-1]
	
	if (strlen(str)>0)
		MergedSuffixStr = str
	else
		MergedSuffixStr = ""
	endif

End


//pass in a string read from the header. Check that strIng doesn't start with a number 
// (or there's a wavename missing, and this is really the next line which is number of special comments.)
Function Check_ICARTT_validName(strIn)
	string strIn

	string ch
	strIn = RemoveFirstSpaces(strIn)	//Remove any leading spaces.
	ch = strIn[0]	//get 1st char.
	if ((char2num(ch) >= 48) * (char2num(ch) <= 57))	//ascii range for numbers
		Abort strIn+" doesn't appear to be a valid wave name, or wrong number of wavenames."
	endif

End


Function/S revDateToyyyymmdd(revStr)	//pass in string like "2012, 01, 12" may have no spaces, or more than 1
	string revStr
	
	variable year, month, day
	string yyyymmdd
	
	sscanf revStr, "%d,%d,%d", year, month, day
	yyyymmdd = num2str(year)
	if (month<10)
		yyyymmdd+="0"
	endif
	yyyymmdd+=num2str(month)
	
	if (day<10)
		yyyymmdd+="0"
	endif
	yyyymmdd+=num2str(day)
	return yyyymmdd
End


// *************************************************
// Returns 1, true, if the string has the characters "time", "utc", "start", or "stop" or any capitalized variations.

Function Icartt_IsATimeString(str)
	String str

	if (strsearch(LowerStr(str), "time", 0) >=0)
		return 1
	elseif (strsearch(LowerStr(str), "utc", 0) >=0)
		return 1
	elseif (strsearch(LowerStr(str), "start", 0) >=0)
		return 1
	elseif (strsearch(LowerStr(str), "stop", 0) >=0)
		return 1
	elseif (strsearch(LowerStr(str), "secmid", 0) >=0)
		return 1
	elseif (strsearch(LowerStr(str), "minmid", 0) >=0)
		return 1
	else
		return 0
	endif

End


// *************************************************
Function GetOffsetToRevYear(datestr)	// pass in string containing file date and modification date. Return offset to start of string containing Modification year. ie. pass in "2006, 9, 20, 2007, 8, 24", and return 12 (the position of 2007)
	string datestr

	variable len, pos
	
	len = strlen(datestr)
	pos = strsearch(datestr, ",", 0)	//first comma
	if (pos!=-1)
		pos = strsearch(datestr, ",", pos+1)	//2nd comma
		pos = strsearch(datestr, ",", pos+1)	//3rd comma
		return pos+1	//want starting character of year of modification
	else
		abort "Date string does not have the neccesary commas."
	endif
End

// *************************************************
// Sets globals FileNameStr and FileNameStr4Mac if user does not cancel dialog box; does NOT set IcarttFilePath.

Function Icartt_SelectFileDialog()

	SVAR FileNameStr = root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs = root:ICARTTFileFormat:FileNameStr4Macs
	SVAR IcarttPathStr = root:ICARTTFileFormat:Panel:icarttPathStr

	variable refNum
	string  pathStr
	
	Open/C="????"/T="????"/D/R/M= "Select an ICARTT file." refNum 		// /D is dialog only; we don't have to close the file because it is never opened
	if (strlen(s_filename)==0)
		Abort	//user cancelled
	endif
	
	if (strlen(s_filename)>0)
		// first deal with the path
		pathStr = ParseFilePath(1, s_filename, ":", 1, 0)
		
		Newpath/q/o ICARTTFilePath pathStr		// creates or overwrites the path where the file is located.			
		IcarttPathStr =  ConvertPathStr("IcarttFilePath")		// for the panel
	
		// now deal with file name
		FileNameStr4Macs = s_filename[strlen(pathStr), strlen(s_filename)-1]

		if (cmpstr("Macintosh", IgorInfo(2))==0  )		// Macs can truncate filenames
			ExecuteScriptText/Z "get alias \""+s_filename+"\" as text"
			s_filename = S_Value[1, strlen(S_Value)-2]		// strip out beginning and ending quotes			
			FileNameStr = s_filename[strlen(pathStr), strlen(s_filename)-1]
		else
			FileNameStr = FileNameStr4Macs		
		endif
	
	else
		FileNameStr = ""		
		FileNameStr4Macs = ""		
	endif

End


// *************************************************
// Sets important globals as an initial step to see if an icartt file is valid.

Function Load_GetNumHeaderLinesFileTyp(fileName)
	String fileName

	NVAR NumHeaderLinesVar = root:ICARTTFileFormat:NumHeaderLinesVar
	SVAR FileFormatTypeStr = root:ICARTTFileFormat:FileFormatTypeStr
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar
	
	variable refNum,y, varsRead
	string lineStr
				
	Icartt_SetIcartFilePath()
	
	Open/R/Z=2/P=IcarttFilePath refNum as fileName
	
	if (refNum==0)
		Abort "The file "+filename+" was not opened - Aborting from Load_GetNumHeaderLinesFileTyp"//+num2str( V_flag)
	endif
				
	// Read and parse first line
	FReadLine refNum, lineStr
	
	variable FileFormatTypeNum
//	sscanf lineStr, "%d, %s", numHeaderLinesVar, FileFormatTypeStr
	sscanf lineStr, "%d, %d", numHeaderLinesVar, FileFormatTypeNum
	varsRead = V_Flag
	if (varsRead!=2)
		Abort "Had trouble reading number of header lines on first line."
	endif
	FileFormatTypeStr = num2str(FileFormatTypeNum)
	
	if (numHeaderLinesVar==0)
		Abort "Had trouble reading the number of header lines on first line. - Aborting from Load_GetNumHeaderLinesFileTyp"
	endif	
	
	for (y=0;y<9;y+=1)		// The number of primary variables should always be on the 10th line.
		FReadLine refNum, lineStr
	endfor
	
	Close refNum
	NumVariablesVar = str2num(lineStr)

	if (numtype(NumVariablesVar)!=0)
		Abort "Couldn't determine the number of variables in the file - Aborting from Load_GetNumHeaderLinesFileTyp"
	endif

End


// *************************************************
// Sets the UTCDataStartVar and UTCDataStartStr from the date in the filename.
//During LoadICARTT1001(), UTCDataStartVar is set BEFORE Load_SetDateFromFilename() in Load_IngestHeader() using the date in the header.
// This function will overwrite that variable and use the filename for the date. But before reassigning it, the value is checked to make sure starttime is same using either method.

Function Load_SetDateFromFilename()
		
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR UTCDataStartStr = root:ICARTTFileFormat:UTCDataStartStr
	
	SVAR FileNameStr= root:ICARTTFileFormat:FileNameStr

	string str
	variable  pos1, pos2, pos3, pos4, pos5, dataStartVarFromHeader
		
	//  assumes file name of the form DataID_platform_yyyymmdd_Rx_mergeorother.ict
	
	pos1 = strsearch(FileNameStr, "_", 0 )				// identifies DataID_platform
	pos2 = strsearch(FileNameStr, "_", pos1+1)		// identifies platform_yyyymmdd
	pos3 = strsearch(FileNameStr, "_", pos2+1)		// identifies yyyymmdd_Rx
	pos4 = strsearch(FileNameStr, "_", pos3+1)		// identifies Rx_mergeorother if it exists
	pos5 = strsearch(FileNameStr, ".", Inf, 1)			// identifies.ict  2.13 fix.  Now search backwards in case some dumb user users a period in their name

	str = FileNameStr[pos2+1, pos3-1]	// UTCDataStart
	
	dataStartVarFromHeader = UTCDataStartVar	//During LoadICARTT1001(), UTCDataStartVar is already set using date in header, so remember this number
	UTCDataStartVar = yyyymmddhhmmss2time(str+"000000")	// this now sets UTCDataStartVar from the 
	if (dataStartVarFromHeader != UTCDataStartVar)
		Abort "Date in header and date in filename don't agree."
	endif

	UTCDataStartStr = str[0,3]+" "+str[4,5]+ " "+ str[6,7]	//this is set using the date in the filename.
End


// *************************************************
// Simply loads lines of text from a file; does some error checking for consistency of number of variables.
// Load_IngestHeader1001 function does more error checking.

Function Load_LoadHeader1001(fileName)
	String fileName
		
	variable numVars

	NVAR NumHeaderLinesVar = root:ICARTTFileFormat:NumHeaderLinesVar
		
	WAVE/T ICARTTHeaderParam = root:ICARTTFileFormat:ICARTTHeaderParam
	WAVE/T ICARTTHeaderValue = root:ICARTTFileFormat:ICARTTHeaderValue
 		
	variable refNum, i, y, numLinesHaveBeenRead
	string lineStr, str, str1
	variable numVariables, numSpecialCommentLinesVar, numNormalCommentLinesVar
		
	Load_GetNumHeaderLinesFileTyp(fileName)	//reads 1st line of header. Sets NumHeaderLinesVar, FileFormatTypeStr
	Icartt_CheckRevStr()
	
 	Open/R/Z=2/P=IcarttFilePath refNum as fileName
				
	numLinesHaveBeenRead = 0
	
	// Read and parse first line
	ICARTTHeaderValue[0] = fileName// FileName

	FReadLine refNum, lineStr
	ICARTTHeaderValue[1] =  lineStr		// NumHeaderLines_FFI
	FReadLine refNum, lineStr
	ICARTTHeaderValue[2] = lineStr		// PIName
	FReadLine refNum, lineStr
	ICARTTHeaderValue[3] = lineStr		//PIAffiliation
	FReadLine refNum, lineStr
	ICARTTHeaderValue[4] = lineStr		//DataSourceDescription
	FReadLine refNum, lineStr
	ICARTTHeaderValue[5] = lineStr		//MissionName
	FReadLine refNum, lineStr
	ICARTTHeaderValue[6] = lineStr  	//FileVolumeNumber, TotalVolumeNumber
 	FReadLine refNum, lineStr
	ICARTTHeaderValue[7] = lineStr		//UTCRevisionDate
	FReadLine refNum, lineStr
	ICARTTHeaderValue[8] = lineStr		//DataInterval
	FReadLine refNum, lineStr
	ICARTTHeaderValue[9] = lineStr		//IndependentVariableName
	FReadLine refNum, lineStr
	ICARTTHeaderValue[10] = lineStr		//NumVariables

	numVariables = str2num(ICARTTHeaderValue[10]) //NumVariables
	
	if ((numVariables >600) || (numVariables <0) )		// currently the max number of dependent parameters is 400
		close refNum
		Abort "Had trouble reading in the number of dependent parameters.-  Aborting from Load_LoadHeader1001"
	endif	
	
 	FReadLine refNum, lineStr
	ICARTTHeaderValue[11] = lineStr		//ScaleFactor(s)
	numVars = ItemsInList(lineStr, ",")
	if (numVariables != numVars)
		Abort "Number of scale factors ("+num2str(numVars)+") doesn't agree with number of variables ("+num2str(numVariables)+")."
	endif

	FReadLine refNum, lineStr
	ICARTTHeaderValue[12] = lineStr		//MissingDataIndicator(s)
	numVars = ItemsInList(lineStr, ",")
	if (numVariables != numVars)
		Abort "Number of missing value indicators ("+num2str(numVars)+") doesn't agree with number of variables ("+num2str(numVariables)+")."
	endif

	numLinesHaveBeenRead = 12
	
	FReadLine refNum, lineStr
	numLinesHaveBeenRead+=1
//	Check_ICARTT_validName(lineStr)	//check the parameter name to see that it is a valid name and doesn't start with a number.
	if (numVariables>1)
		str=lineStr+ ";"
		for(i=0;i<numVariables-1; i+=1)			// for now we just read the whole thing.... later we can parse into variable name, units, descriptor, etc.
			FReadLine refNum, lineStr
//			Check_ICARTT_validName(lineStr)
			str+=lineStr + ";"
			numLinesHaveBeenRead+=1
		endfor
		ICARTTHeaderValue[13] = str	//	VariableNames	
	else
		ICARTTHeaderValue[13] = lineStr		//	VariableNames	
	endif

	FReadLine refNum, lineStr
	ICARTTHeaderValue[14] = lineStr		//	NumSpecialCommentLines	
	numLinesHaveBeenRead+=1
	
	numSpecialCommentLinesVar = str2num(ICARTTHeaderValue[14])

	if ((numSpecialCommentLinesVar >300) || (numSpecialCommentLinesVar <0) )
		close refNum
		Abort "Had trouble reading in the number of special comment lines -  Aborting from Load_LoadHeader1001"
	endif
		
	if (numSpecialCommentLinesVar>0)
		str=""
		for(i=0;i< numSpecialCommentLinesVar; i+=1)
			FReadLine refNum, lineStr
			str+=lineStr
			numLinesHaveBeenRead+=1
		endfor
		ICARTTHeaderValue[15] = str	//	SpecialCommentLines	
	else
		ICARTTHeaderValue[15] = "N/A"	//	SpecialCommentLines		
	endif
	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[16] = lineStr		//	NumNormalCommentLines	
	numLinesHaveBeenRead+=1

	numNormalCommentLinesVar = str2num(ICARTTHeaderValue[16])
	
	if ((numNormalCommentLinesVar >400) || (numVariables <0) )
		close refNum
		Abort "Had trouble reading in the number of normal comment lines. - Aborting from Load_LoadHeader1001"
	endif

//	Dump all the Normal Comments into this placeholder.  Useful if things go awry later.
	FStatus refNum
	i = V_filePos
	str = ""
	for(y=0;y< numNormalCommentLinesVar;y+=1)
		FReadLine refNum, lineStr
		str+=lineStr + "\r"
	endfor

	ICARTTHeaderValue[17] = str	//	NormalCommentLines  we'll put the whole thing in here later.	
	FSetPos refNum, i		// set the file position back to the start of the normal comment lines 
	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[18] = lineStr		//	PIContactInfo	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[19] = lineStr		//	PlatformInfo		
	FReadLine refNum, lineStr
	ICARTTHeaderValue[20] = lineStr		//	LocationInfo
	FReadLine refNum, lineStr	
	ICARTTHeaderValue[21] = lineStr		//	AssociatedFileNames

	FReadLine refNum, lineStr	
	ICARTTHeaderValue[22] = lineStr		//	InstrumentInfo	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[23] = lineStr		//	DataInfo
	FReadLine refNum, lineStr
	ICARTTHeaderValue[24] = lineStr		//	UncertaintyInfo		

	FReadLine refNum, lineStr	
	ICARTTHeaderValue[25] = lineStr		//	ULODFlag	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[26] = lineStr		//	ULODValue	

	FReadLine refNum, lineStr	
	ICARTTHeaderValue[27] = lineStr		//	LLODFlag	
	FReadLine refNum, lineStr
	ICARTTHeaderValue[28] = lineStr		//	LLODValue	

	FReadLine refNum, lineStr	
	ICARTTHeaderValue[29] = lineStr		//	DMContactInfo	
	FReadLine refNum, lineStr	
	ICARTTHeaderValue[30] = lineStr		//	ProjectInfo	

	FReadLine refNum, lineStr
	ICARTTHeaderValue[31] = lineStr		//	StipulationsOnUse	

	numLinesHaveBeenRead+=14
	
	str = ""
	i=0
	do
		FReadLine refNum, lineStr
		numLinesHaveBeenRead+=1
		y = cmpstr(lowerstr(lineStr[0,7]), lowerstr("REVISION"))
		if ((y!=0) && (strlen(lineStr)>0))
			str += lineStr
		endif
		i+=1
	while((y!=0) && (strlen(lineStr)>0) &&(i<200) )
	if (i==200)
		Abort "There seems to be something wrong with the header file near the revision comments section - Aborting from Load_LoadHeader1001"
	endif
	
	ICARTTHeaderValue[32] =  str	//	OtherComments	
	
	ICARTTHeaderValue[33] = lineStr	//	RevisionNumberStr	

	str = ""
	do
		FReadLine refNum, lineStr
		numLinesHaveBeenRead+=1
		str += lineStr
	while((strlen(lineStr)>0) && (numLinesHaveBeenRead < NumHeaderLinesVar-1))
	
	ICARTTHeaderValue[34] = str	//	RevisionStr	
	FReadLine refNum, lineStr  // column titles 
		
//	Check line containing column titles (currently in lineStr)
	numVars = ItemsInList(lineStr, ",")
	if (numVars != numVariables+1)	//+1 because numVariables doesn't include title for the indepenent var (time)
		Abort "Number of column titles ("+num2str(numVars)+") doesn't agree with number of variables ("+num2str(numVariables+1)+")."
	endif
	string colTitle = StringFromList(0, lineStr, ",")	//1st column
	if (!GrepString(colTitle, "[a-df-zA-DF-Z]"))	// if 1st title doesn't have any of the following letters, flag it as bad.
		Doalert 1, "Title for column 1 doesn't appear to contain any letters. Possible wrong number indicating # of header lines. Continue?"
	endif
	if (V_flag==2)	//user clicked NO
		abort
	endif
	
	colTitle = StringFromList(1, lineStr, ",")	//2nd column
	if (!GrepString(colTitle, "[a-df-zA-DF-Z]")) //if 2nd title doesn't have any of the following letters, flag it as bad.
		Doalert 1, "Title for column 2 doesn't appear to contain any letters. Possible wrong number indicating # of header lines. Continue?"
	endif
	if (V_flag==2)	//user clicked NO
		abort
	endif
	ICARTTHeaderValue[35] = lineStr	//	Column Titles (seem to be OK and valid).

	FReadLine refNum, lineStr	// First line of data
	Close refNum

//	Check that this first line of data is valid numbers, and correct number of items.
	numVars = ItemsInList(lineStr, ",")
	if (numVars != numVariables+1)	//+1 because numVariables doesn't include title for the indepenent var (time)
		Abort "Number of data columns ("+num2str(numVars)+") doesn't agree with number of variables ("+num2str(numVariables+1)+")."
	endif
	
	variable var1, var2
	sscanf lineStr, "%f, %f", var1, var2	//there must be at least two numbers in first line of data .Try to read these as a test of whether we are on correct line.
	if (v_flag!=2)
		Abort "Couldn't read first two numbers in first line of data. Possibly has wrong number of header lines."
	endif

End

// *************************************************
// Does cleaning and sanity checking from previous Load_LoadHeader1001 call.

Function Load_IngestHeader1001()
		
	WAVE/T ICARTTHeaderParam = root:ICARTTFileFormat:ICARTTHeaderParam
	WAVE/T ICARTTHeaderValue = root:ICARTTFileFormat:ICARTTHeaderValue
	
	SVAR FileNameStr =root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs =root:ICARTTFileFormat:FileNameStr4Macs
 	
	NVAR NumHeaderLinesVar = root:ICARTTFileFormat:NumHeaderLinesVar
	SVAR FileFormatTypeStr =root:ICARTTFileFormat:FileFormatTypeStr

	SVAR PINameStr = root:ICARTTFileFormat:PINameStr
	SVAR PIAffiliationStr = root:ICARTTFileFormat:PIAffiliationStr
	SVAR DataSourceDescriptionStr = root:ICARTTFileFormat:DataSourceDescriptionStr
	SVAR MissionNameStr = root:ICARTTFileFormat:MissionNameStr

	NVAR FileVolumeNumberVar = root:ICARTTFileFormat:FileVolumeNumberVar
	NVAR TotalVolumeNumberVar = root:ICARTTFileFormat:TotalVolumeNumberVar

	SVAR UTCDataStartStr= root:ICARTTFileFormat:UTCDataStartStr
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR UTCRevisionDateStr  = root:ICARTTFileFormat:UTCRevisionDateStr

	NVAR DataIntervalVar = root:ICARTTFileFormat:DataIntervalVar

	SVAR IndependentVariableNameStr = root:ICARTTFileFormat:IndependentVariableNameStr
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar

	NVAR ScaleFactorVar  = root:ICARTTFileFormat:ScaleFactorVar
	NVAR MissingDataIndicatorVar = root:ICARTTFileFormat:MissingDataIndicatorVar

	SVAR VariableNamesList = root:ICARTTFileFormat:VariableNamesList

	NVAR NumSpecialCommentLinesVar = root:ICARTTFileFormat:NumSpecialCommentLinesVar
	SVAR SpecialCommentsStr = root:ICARTTFileFormat:SpecialCommentsStr

	NVAR NumNormalCommentLinesVar = root:ICARTTFileFormat:NumNormalCommentLinesVar
	SVAR NormalCommentsStr = root:ICARTTFileFormat:NormalCommentsStr

	SVAR PIContactInfoStr = root:ICARTTFileFormat:PIContactInfoStr
	SVAR PlatformSiteInfoStr  = root:ICARTTFileFormat:PlatformSiteInfoStr
	SVAR LocationInfoStr  = root:ICARTTFileFormat:LocationInfoStr

	SVAR AssociatedFileNamesStr  = root:ICARTTFileFormat:AssociatedFileNamesStr
	SVAR InstrumentInfoStr  = root:ICARTTFileFormat:InstrumentInfoStr
	SVAR DataInfoStr  = root:ICARTTFileFormat:DataInfoStr
	SVAR UncertaintyInfoStr  = root:ICARTTFileFormat:UncertaintyInfoStr

	NVAR ULODFlagVar = root:ICARTTFileFormat:ULODFlagVar
	SVAR ULODValueStr  = root:ICARTTFileFormat:ULODValueStr
	NVAR LLODFlagVar = root:ICARTTFileFormat:LLODFlagVar
	SVAR LLODValueStr  = root:ICARTTFileFormat:LLODValueStr

	SVAR DataManagerContactInfoStr  = root:ICARTTFileFormat:DataManagerContactInfoStr
	SVAR ProjectInfoStr  = root:ICARTTFileFormat:ProjectInfoStr

	SVAR RevisionNumberStr  = root:ICARTTFileFormat:RevisionNumberStr
	SVAR RevisionStr  = root:ICARTTFileFormat:RevisionStr
	
	SVAR StipulationsOnUseStr = root:ICARTTFileFormat:StipulationsOnUseStr
	SVAR OtherCommentsStr = root:ICARTTFileFormat:OtherCommentsStr

	SVAR UnitsList = root:ICARTTFileFormat:UnitsList
	SVAR OptionalDecripList = root:ICARTTFileFormat:OptionalDecripList

	wave/t WaveListTextWaveMatrix = root:ICARTTFileFormat:WaveListTextWaveMatrix
	wave SelWaveMatrix = root:ICARTTFileFormat:SelWaveMatrix
	
	string str,str1 
	variable idex 
	
	str = ICARTTHeaderValue[1]
		
	NumHeaderLinesVar = str2num(TeaseOutNumbers(str, 0)	)
	FileFormatTypeStr = TeaseOutNumbers(str, strlen(TeaseOutNumbers(str, 0)))
	FileFormatTypeStr = RemoveTrailingCRorLF(FileFormatTypeStr)
	
	PINameStr = RemoveTrailingCRorLF(  ICARTTHeaderValue[2])
	PIAffiliationStr = RemoveTrailingCRorLF(   ICARTTHeaderValue[3]  )

	DataSourceDescriptionStr = RemoveTrailingCRorLF(  ICARTTHeaderValue[4]  )
	MissionNameStr = RemoveTrailingCRorLF(  ICARTTHeaderValue[5] )

	str = ICARTTHeaderValue[6]

	FileVolumeNumberVar = str2num(TeaseOutNumbers(str, 0)	)
	TotalVolumeNumberVar = str2num(TeaseOutNumbers(str, strlen(TeaseOutNumbers(str, 0))))

	str = ICARTTHeaderValue[7]				

	UTCDataStartStr = Icartt_TeaseOutDate(str, 0)
	UTCDataStartVar = yyyymmddhhmmss2time(UTCDataStartStr[0,3]+UTCDataStartStr[6,7]+UTCDataStartStr[10,11]+"000000")

	variable yearRevPosition	//position in str where date of revision year starts
	yearRevPosition = GetOffsetToRevYear(str)	//returns start of rev string.
	UTCRevisionDateStr =  Icartt_TeaseOutDate(str, yearRevPosition)  // new method to get the revision date string.

	DataIntervalVar = str2num(ICARTTHeaderValue[8])
	
	IndependentVariableNameStr = ICARTTHeaderValue[9]

	NumVariablesVar = str2num(ICARTTHeaderValue[10])

	str = ICARTTHeaderValue[11]
	ScaleFactorVar = Str2Num(TeaseOutNumbers(str, 0))		// assumes scale factor is same for all variables

	str = ICARTTHeaderValue[12]
	MissingDataIndicatorVar = Str2Num(TeaseOutNumbers(str, 0))		// assumes missing value is same for all variables

	str = ReplaceString(" ", RemoveCarriageReturns(ICARTTHeaderValue[13]),"") // StrSubstitute(" ", RemoveCarriageReturns(ICARTTHeaderValue[13]),"") 	//	VariableNames	
	VariableNamesList=""
	UnitsList=""
	OptionalDecripList=""
	redimension/n=(NumVariablesVar+1, 4) WaveListTextWaveMatrix, SelWaveMatrix
	//fill in the independent variable as the first entry in table.
	WaveListTextWaveMatrix[0][1]=  stringFromList(0, RemoveEnding(IndependentVariableNameStr), ",")
	WaveListTextWaveMatrix[0][2]= stringFromList(1, RemoveEnding(IndependentVariableNameStr), ",")
	WaveListTextWaveMatrix[0][3]= stringFromList(2, RemoveEnding(IndependentVariableNameStr), ",")
	
	for (idex=0;idex<NumVariablesVar;idex+=1)	  //1.12 bug fix.  not <=  //fill in table for dependent vars, staring on row 1.
		str1 = stringFromList(idex, str)			// doesn't handle things well when variable names are separated by spaces and not commas
//		print idex, str1 
		VariableNamesList+= stringFromList(0, str1, ",") + ";"		// DTS
		WaveListTextWaveMatrix[idex+1][1]= stringFromList(0, str1, ",")
		UnitsList += stringFromList(1, str1, ",")+ ";"// will return blanks if need be
		WaveListTextWaveMatrix[idex+1][2]=  stringFromList(1, str1, ",")
		OptionalDecripList += stringFromList(2, str1, ",")+ ";"		// will return blanks if need be
		WaveListTextWaveMatrix[idex+1][3]= stringFromList(2, str1, ",")
	endfor
	
	NumSpecialCommentLinesVar = str2num(ICARTTHeaderValue[14])
	
	SpecialCommentsStr = ICARTTHeaderValue[15]
	
	NumNormalCommentLinesVar = Str2Num(ICARTTHeaderValue[16])

	NormalCommentsStr = ICARTTHeaderValue[17] 	
	
	PIContactInfoStr=  RemoveTrailingCRorLF( RemoveTheseFirstChar(ICARTTHeaderValue[18] , "PI_CONTACT_INFO:  ")  )
	PlatformSiteInfoStr = RemoveTrailingCRorLF( RemoveTheseFirstChar(ICARTTHeaderValue[19] , "PLATFORM:  ") )
	LocationInfoStr = RemoveTrailingCRorLF( RemoveTheseFirstChar(ICARTTHeaderValue[20] , "LOCATION:  ") )
	AssociatedFileNamesStr = RemoveTrailingCRorLF( RemoveTheseFirstChar(ICARTTHeaderValue[21] , "ASSOCIATED_DATA:  ") )
	InstrumentInfoStr = RemoveTrailingCRorLF(RemoveTheseFirstChar(ICARTTHeaderValue[22] , "INSTRUMENT_INFO:  ") )
	DataInfoStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[23] , "DATA_INFO:  ") )
	UncertaintyInfoStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[24] , "UNCERTAINTY:  ") )
	ULODFlagVar = str2num(RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[25] , "ULOD_FLAG:  ") ))
	ULODValueStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[26] , "ULOD_VALUE:  ") )
	LLODFlagVar=str2num(RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[27] , "LLOD_FLAG:  ") )  )
	LLODValueStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[28] , "LLOD_VALUE:  ") )
	DataManagerContactInfoStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[29] , "DM_CONTACT_INFO:  ") )
	ProjectInfoStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[30], "PROJECT_INFO:  ") )
	StipulationsOnUseStr= RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[31], "STIPULATIONS_ON_USE:  ") )
	OtherCommentsStr= RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[32], "OTHER_COMMENTS:  ") )
	RevisionNumberStr = RemoveTrailingCRorLF (RemoveTheseFirstChar(ICARTTHeaderValue[33], "REVISION:  ") )

	RevisionStr = ICARTTHeaderValue[34]

	//when header is read from existing ICARTT file to use as header for new ICARTT file, column titles are included with RevisionStr. 
	// Modify that string to get rid of the titles. Those get written from the list of dependent vars. already when writing the new ICARTT file.

//  1.32A  modification by Donna
//  the last \r\n needs to be removed.  When having many revision comments we need a \r\n (carriage return line feed) for each line.
//	variable pos = strsearch(RevisionStr, "\r\n", strlen(RevisionStr)-1,1)	
//	RevisionStr = RevisionStr[0, pos]

End


// *************************************************
//  Loads text data from the data file into waves.  Prompts the user if waves will be overwritten.
// Creates and sets the global string VariableNamesList

Function Load_LoadData1001(fileName)
	String fileName

	NVAR numHeaderLinesVar = root:ICARTTFileFormat:numHeaderLinesVar
	SVAR VariableNamesList= root:ICARTTFileFormat:VariableNamesList
		
//	LoadWave/A/P=IcarttFilePath/G/W/K=0/V={" "," $",0,1}/L={numHeaderLinesVar-1,numHeaderLinesVar,0,0,0} fileName		// loads general text as single precision
	LoadWave/D/A/P=IcarttFilePath/J/W/K=0/V={","," $",0,1}/L={numHeaderLinesVar-1,numHeaderLinesVar,0,0,0} fileName		// loads delimited text as double precision
	VariableNamesList = S_waveNames
	if (cmpstr("wave0", stringFromList(0, VariableNamesList))==0)	//if first item in list of waves loaded is wave0, 
		DoAlert 1, "Wavenames not read from file. Number of header lines may be wrong. Continue?"
		if (V_flag==2)	//user clicked NO
			abort
		endif
	endif

 // 	IcarttButton_UpdateWavesList("buttonUpdateWaveList")

End

// *************************************************
//  Loads text data from the data file into waves.  Prompts the user if waves will be overwritten.
// Creates and sets the global string VariableNamesList

Function Load_LoadData(fileName)
	String fileName

	NVAR numHeaderLinesVar = root:ICARTTFileFormat:numHeaderLinesVar
	SVAR VariableNamesList= root:ICARTTFileFormat:VariableNamesList
		
//	LoadWave/A/P=IcarttFilePath/G/W/K=0/V={" "," $",0,1}/L={numHeaderLinesVar-1,numHeaderLinesVar,0,0,0} fileName		// loads general text as single precision
	LoadWave/A/P=IcarttFilePath/J/W/K=0/V={","," $",0,1}/L={numHeaderLinesVar-1,numHeaderLinesVar,0,0,0} fileName		// loads delimited text as single precision
	VariableNamesList = S_waveNames
	if (cmpstr("wave0", stringFromList(0, VariableNamesList))==0)	//if first item in list of waves loaded is wave0, 
		DoAlert 1, "Wavenames not read from file. Number of header lines may be wrong. Continue?"
		if (V_flag==2)	//user clicked NO
			abort
		endif
	endif

 // 	IcarttButton_UpdateWavesList("buttonUpdateWaveList")

End

// *************************************************
// Replaces the missing values for all dependent variables with nans.
// First does CheckNumVariablesICARTT1001 run so that the numVariablesVar is correct
// To all time waves it changes dimension to double, adds UTCDataStartVar value to it, and sets wave scaling to date&time.

Function Load_ChangeMissingDoDate1001()

	NVAR MissingDataIndicatorVar = root:ICARTTFileFormat:MissingDataIndicatorVar
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR VariableNamesList= root:ICARTTFileFormat:VariableNamesList		// actually loaded wave names - not what was indicated in the header
	
	variable idex, num
	string nameStr
			
	num = ItemsInList(VariableNamesList)
	
	for (idex=0; idex<num; idex+=1)

		nameStr = StringFromList(idex, VariableNamesList, ";")

		wave wav = $nameStr

		if (WaveExists(wav) ==0)
			DoAlert 1,  "The wave "+namestr+" does not exist.  Continue with processing?"
			if (V_flag == 2)
				Abort "The function was canceled at user request - Aborting from Load_ChangeMissingDoDate1001"
			endif
		else
			if (WaveType(wav, 1)!=2)		// don't do this with text waves.
				wav = SelectNumber (round(wav[p]) == MissingDataIndicatorVar, wav[p], nan)
				if (Icartt_IsATimeString(namestr))	//ICARTT files now loaded as double precision.
					wav+=UTCDataStartVar
					SetScale d 0,0,"dat", wav 
				endif
			endif
		endif		// the wave exists
		
	endfor

End


// *************************************************
// Creates an icartt header file.

Function Create_CreateHeader()
			
	SVAR FileNameStr = root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs = root:ICARTTFileFormat:FileNameStr4Macs
	
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar

	NVAR NumHeaderLinesVar = root:ICARTTFileFormat:NumHeaderLinesVar
	SVAR FileFormatTypeStr = root:ICARTTFileFormat:FileFormatTypeStr
	SVAR PINameStr = root:ICARTTFileFormat:PINameStr
	SVAR PIAffiliationStr  = root:ICARTTFileFormat:PIAffiliationStr
	SVAR DataSourceDescriptionStr  = root:ICARTTFileFormat:DataSourceDescriptionStr
	SVAR MissionNameStr = root:ICARTTFileFormat:MissionNameStr
	NVAR FileVolumeNumberVar = root:ICARTTFileFormat:FileVolumeNumberVar
	NVAR TotalVolumeNumberVar = root:ICARTTFileFormat:TotalVolumeNumberVar
	SVAR UTCDataStartStr = root:ICARTTFileFormat:UTCDataStartStr
	SVAR UTCRevisionDateStr = root:ICARTTFileFormat:UTCRevisionDateStr
	NVAR DataIntervalVar = root:ICARTTFileFormat:DataIntervalVar
	SVAR IndependentVariableNameStr = root:ICARTTFileFormat:IndependentVariableNameStr
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar
	NVAR ScaleFactorVar = root:ICARTTFileFormat:ScaleFactorVar
	NVAR MissingDataIndicatorVar = root:ICARTTFileFormat:MissingDataIndicatorVar
	SVAR VariableNamesList = root:ICARTTFileFormat:VariableNamesList

	NVAR NumSpecialCommentLinesVar = root:ICARTTFileFormat:NumSpecialCommentLinesVar
	SVAR SpecialCommentsStr = root:ICARTTFileFormat:SpecialCommentsStr

	NVAR NumNormalCommentLinesVar = root:ICARTTFileFormat:NumNormalCommentLinesVar
	SVAR NormalCommentsStr = root:ICARTTFileFormat:NormalCommentsStr

	SVAR PIContactInfoStr = root:ICARTTFileFormat:PIContactInfoStr
	SVAR PlatformSiteInfoStr = root:ICARTTFileFormat:PlatformSiteInfoStr
	SVAR LocationInfoStr = root:ICARTTFileFormat:LocationInfoStr
	SVAR AssociatedFileNamesStr = root:ICARTTFileFormat:AssociatedFileNamesStr
	SVAR InstrumentInfoStr = root:ICARTTFileFormat:InstrumentInfoStr
	SVAR DataInfoStr = root:ICARTTFileFormat:DataInfoStr
	SVAR UncertaintyInfoStr = root:ICARTTFileFormat:UncertaintyInfoStr
	NVAR ULODFlagVar = root:ICARTTFileFormat:ULODFlagVar
	SVAR ULODValueStr = root:ICARTTFileFormat:ULODValueStr
	NVAR LLODFlagVar= root:ICARTTFileFormat:LLODFlagVar
	SVAR LLODValueStr	= root:ICARTTFileFormat:LLODValueStr
	SVAR DataManagerContactInfoStr= root:ICARTTFileFormat:DataManagerContactInfoStr
	SVAR ProjectInfoStr= root:ICARTTFileFormat:ProjectInfoStr
	SVAR StipulationsOnUseStr = root:ICARTTFileFormat:StipulationsOnUseStr
	NVAR NumOtherCommentsVar= root:ICARTTFileFormat:NumOtherCommentsVar
	SVAR OtherCommentsStr = root:ICARTTFileFormat:OtherCommentsStr
	SVAR RevisionNumberStr = root:ICARTTFileFormat:RevisionNumberStr
	SVAR RevisionStr= root:ICARTTFileFormat:RevisionStr

	WAVE/T WaveListTextWaveMatrix= root:ICARTTFileFormat:WaveListTextWaveMatrix	// for ListBox
		
	SVAR IcarttPathStr = root:ICARTTFileFormat:Panel:IcarttPathStr

	variable fileNum, idex, jdex, OptionalDescripFlag,numCol
	string str, cmd, yyyymmddStr, yyyymmddStrFmt
	
	wave/z IndependentWave=$IndependentVariableNameStr  // DTS Oct 2013
	if (!WaveExists(IndependentWave))
		abort "Could not find the wave "+IndependentVariableNameStr+" in the current data folder.  Make sure all waves are in the current data folder and try again.  Aborting from Create_CreateHeader"
	endif
	
//	yyyymmddStr = ReplaceString(" ", UTCDataStartStr, ", ")
//	yyyymmddStrFmt = yyyymmddStr[0,3]+", " + yyyymmddStr[4,5]+", " + yyyymmddStr[6,7]
	Create_CheckSanitizeHead1001()

	OptionalDescripFlag= Icartt_CheckOptionalDescriptor()

	Icartt_SetIcartFilePath()
	
	Open/P=ICARTTFilePath fileNum as FileNameStr			// Will overwrite if exists
	
	// \r\n is carriage return line feed
	
	Fprintf fileNum, "%d, %s\r\n", NumHeaderLinesVar, FileFormatTypeStr
	Fprintf fileNum, "%s\r\n", PINameStr
	Fprintf fileNum, "%s\r\n",  PIAffiliationStr 
	Fprintf fileNum, "%s\r\n", DataSourceDescriptionStr 
	Fprintf fileNum, "%s\r\n", MissionNameStr
	Fprintf fileNum, "%s, %s\r\n", num2str(FileVolumeNumberVar), num2str(TotalVolumeNumberVar)
	Fprintf fileNum, "%s, %s\r\n",UTCDataStartStr , UTCRevisionDateStr  //yyyymmddStrFmt, UTCRevisionDateStr  //DTS

	Fprintf fileNum, "%s\r\n", num2str(DataIntervalVar)
	str =  ", "+WaveListTextWaveMatrix[0][2]+SelectString(OptionalDescripFlag>0,"", ", "+WaveListTextWaveMatrix[0][3])
	Fprintf fileNum, "%s\r\n", IndependentVariableNameStr+str		
	Fprintf fileNum, "%s\r\n", num2str(NumVariablesVar)
	
	// scaling factors
	str=""
	for (idex=0; idex<NumVariablesVar; idex+=1)
		str+= num2str(ScaleFactorVar)+", "
	endfor
	str= RemoveEnding(str, ", ")+"\r\n"
	Fprintf fileNum, "%s",str
	
	// missing data values
	str=""
	for (idex=0; idex<NumVariablesVar; idex+=1)
		str+= num2str(MissingDataIndicatorVar)+", "
	endfor
	str= RemoveEnding(str, ", ")+"\r\n"
//	Fprintf fileNum, "%s",str
	FprintfLongerThan1000Chars( fileNum,str, noCRflag=1)	//2.14 Donna	// edit for Pedro.. 

	// one line for each parameter, dependent variable
	for (idex=1; idex<NumVariablesVar+1; idex+=1)	//start on row 1 in table for dependent vars. However, need to subtract 1 from VariableNamesList since it is dependent vars starting at index 0
		str =  StringFromList(idex-1, VariableNamesList)+", "+WaveListTextWaveMatrix[idex][2]+SelectString(OptionalDescripFlag>0,"", ", "+WaveListTextWaveMatrix[idex][3]) 
		Fprintf fileNum, "%s\r\n",  str
	endfor

	// comments, etc
	Fprintf fileNum, "%s\r\n", num2str(NumSpecialCommentLinesVar)

	if (NumSpecialCommentLinesVar>0)
		FprintfLongerThan1000Chars(fileNum, SpecialCommentsStr)
	endif	

	Fprintf fileNum, "%s\r\n", num2str(NumNormalCommentLinesVar)

	Fprintf fileNum, "%s\r\n", "PI_CONTACT_INFO: "+PIContactInfoStr
	Fprintf fileNum, "%s\r\n", "PLATFORM: "+PlatformSiteInfoStr 
	Fprintf fileNum, "%s\r\n", "LOCATION: "+LocationInfoStr
	Fprintf fileNum, "%s\r\n", "ASSOCIATED_DATA: "+AssociatedFileNamesStr
	Fprintf fileNum, "%s\r\n", "INSTRUMENT_INFO: "+InstrumentInfoStr
	
	if (strlen(DataInfoStr)< 300)
		Fprintf fileNum, "%s\r\n", "DATA_INFO: "+DataInfoStr		// DTS Oct 2013  A user wanted the option of including a string longer than what is allowed via this command.
	else
		idex=0
		jdex=strlen(DataInfoStr)
			Fprintf fileNum, "DATA_INFO: "	
		do
			Fprintf fileNum, "%s", DataInfoStr[idex, min(idex+300-1, jdex)]		// 299 and 300 are arbitrary, they are simply under the limit of the max number of characters one can print using fprintf	
			idex+=300
		while(idex<jdex)
		Fprintf fileNum, "\r\n"	
	endif
	
	Fprintf fileNum, "%s\r\n", "UNCERTAINTY: "+UncertaintyInfoStr
	Fprintf fileNum, "%s\r\n", "ULOD_FLAG: "+num2str(ULODFlagVar)
	Fprintf fileNum, "%s\r\n", "ULOD_VALUE: "+ULODValueStr
	Fprintf fileNum, "%s\r\n", "LLOD_FLAG: "+num2str(LLODFlagVar)
	Fprintf fileNum, "%s\r\n", "LLOD_VALUE: "+LLODValueStr
	Fprintf fileNum, "%s\r\n", "DM_CONTACT_INFO: "+DataManagerContactInfoStr
	Fprintf fileNum, "%s\r\n", "PROJECT_INFO: "+ProjectInfoStr
	Fprintf fileNum, "%s\r\n", "STIPULATIONS_ON_USE: "+StipulationsOnUseStr
	Fprintf fileNum, "%s", "OTHER_COMMENTS: "
	FprintfLongerThan1000Chars(fileNum, OtherCommentsStr)		

	Fprintf fileNum, "%s\r\n", "REVISION: "+RevisionNumberStr
	FPrintFLongerThan1000Chars(fileNum, RevisionStr)		
	print revisionStr
	
	Fprintf  fileNum, "%s, " NameofWave(IndependentWave)	//write list of column titles.
 	for (idex = 0; idex < ItemsInList(VariableNamesList, ";"); idex+=1 )
		if (idex == ItemsInList(VariableNamesList, ";")-1)
			Fprintf  fileNum, "%s" StringFromList(idex, VariableNamesList, ";")
		else
			Fprintf  fileNum, "%s" StringFromList(idex, VariableNamesList, ";")+ ", "
		endif
	endfor
	Fprintf  fileNum, "\r\n" 
	Close fileNum
	DoWindow/F Icartt_Panel
	
End


// *************************************************
// Checks to see if igor path IcarttFilePath exists and prompt user if it doesn't.

Function Icartt_SetIcartFilePath()

	SVAR IcarttPathStr = root:ICARTTFileFormat:Panel:IcarttPathStr

	PathInfo ICARTTFilePath		// creates or overwrites the path where the file is located.	
	if (V_flag==0)
		NewPath/M="Please select a path for the icartt files" ICARTTFilePath
		if (V_flag!=0)
			Abort "You must select a folder for the igor Icartt file path before proceeding - Aborting from Icartt_CheckFileNameStr"
		endif
	endif
	
	IcarttPathStr = ConvertPathStr("IcarttFilePath")

End


// *************************************************
// Creates or appends data columns to icartt file.
// presumes all sanity checking has been completed.
Function Create_AppendData2Header()
		
	NVAR DataIntervalVar = root:ICARTTFileFormat:DataIntervalVar
	SVAR VariableNamesList = root:ICARTTFileFormat:VariableNamesList	
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR IndependentVariableNameStr= root:ICARTTFileFormat:IndependentVariableNameStr
	SVAR IndependentVariableFormatStr= root:ICARTTFileFormat:IndependentVariableFormatStr
	NVAR NumVariablesVar= root:ICARTTFileFormat:NumVariablesVar
	NVAR MissingDataIndicatorVar= root:ICARTTFileFormat:MissingDataIndicatorVar

	WAVE/T WaveListTextWaveMatrix = root:ICARTTFileFormat:WaveListTextWaveMatrix	// for ListBox
			
	SVAR FileNameStr = root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs = root:ICARTTFileFormat:FileNameStr4Macs
	
	string fileName, str, formatStr, dataFolderStr, digitsStr
	variable fileNum, idex, formatVar
	
	Icartt_SetIcartFilePath()
		
	NumVariablesVar = ItemsInList(VariableNamesList, ";")	//VariableNamesList set in Step 1
		
	wave timewave =$"root:ICARTTFileFormat:Data:"+IndependentVariableNameStr
		
	Create_SanitizeData()
	
	dataFolderStr = GetDataFolder(1)
	SetDataFolder root:ICARTTFileFormat:Data
			
	DoWindow/K MyIcarttTable		// kill the table
	DoWindow/K MyIcarttTable		// set the V_flag
	if (V_flag)
		abort "Please kill the table MyIcarttTable and try again."
	endif
	
	formatStr = WaveListTextWaveMatrix[0][0]
	digitsStr = selectString (strlen(formatStr)>0, "0", formatStr[1])
	Edit/N=MyIcarttTable timewave as "MyIcarttTable"
	ModifyTable format(timewave)=3, digits(timewave)=str2num(digitsStr)		// for timewave  decimal format with one place after the decimal
		
	// recreate the table with our modified copies of data.
	for (idex = 0; idex<NumVariablesVar; idex+=1 )
		str = stringFromList(idex,VariableNamesList)
		wave TempWave = $("root:ICARTTFileFormat:Data:"+str)
		formatStr = WaveListTextWaveMatrix[idex+1][0]
		// returns t, e, i, d with an optional number. t=3; i=1, e=5, d=3
		digitsStr = selectString (strlen(formatStr)>0, "0", formatStr[1])
		formatVar = selectnumber(stringmatch(formatStr[0], "t") || stringmatch(formatStr[0], "d"), nan, 3) 
		formatVar = selectnumber(stringmatch(formatStr[0], "i"), formatVar, 1) 
		formatVar = selectnumber(stringmatch(formatStr[0], "e"), formatVar, 5) 
		AppendtoTable TempWave
		ModifyTable format($NameofWave(TempWave)) = formatVar	// we always use decimal
		ModifyTable digits($NameofWave(TempWave)) = selectnumber(str2num(digitsStr)>0, 0, str2num(digitsStr))
	endfor
	
	SaveTableCopy/M="\r\n"/A=2/N=0/o/S=0/T=2/P=ICARTTFilePath as FileNameStr		// use commas as separators, do not write column names.
	DoWindow/K MyIcarttTable
  
	SetDataFolder $dataFolderStr

End

	
// *************************************************
// Performs a variety of sanity checks; useful for checking values immediately before writing a file.
// Does not do any file writing
Function Create_CheckSanitizeHead1001()
	
	SVAR FileNameStr =root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs =root:ICARTTFileFormat:FileNameStr4Macs
	
	NVAR NumHeaderLinesVar =root:ICARTTFileFormat:NumHeaderLinesVar

	NVAR UTCDataStartVar =root:ICARTTFileFormat:UTCDataStartVar
	SVAR UTCDataStartStr =root:ICARTTFileFormat:UTCDataStartStr
	SVAR UTCRevisionDateStr  =root:ICARTTFileFormat:UTCRevisionDateStr

	NVAR DataIntervalVar =root:ICARTTFileFormat:DataIntervalVar
	SVAR IndependentVariableNameStr =root:ICARTTFileFormat:IndependentVariableNameStr

	NVAR NumVariablesVar =root:ICARTTFileFormat:NumVariablesVar
	SVAR VariableNamesList =root:ICARTTFileFormat:VariableNamesList

	NVAR NumSpecialCommentLinesVar =root:ICARTTFileFormat:NumSpecialCommentLinesVar
	SVAR SpecialCommentsStr =root:ICARTTFileFormat:SpecialCommentsStr
	NVAR NumNormalCommentLinesVar =root:ICARTTFileFormat:NumNormalCommentLinesVar
	SVAR NormalCommentsStr =root:ICARTTFileFormat:NormalCommentsStr

	NVAR NumOtherCommentsVar =root:ICARTTFileFormat:NumOtherCommentsVar
	SVAR OtherCommentsStr =root:ICARTTFileFormat:OtherCommentsStr

	SVAR RevisionNumberStr =root:ICARTTFileFormat:RevisionNumberStr
	SVAR RevisionStr =root:ICARTTFileFormat:RevisionStr

	WAVE/t WaveListTextWaveMatrix=root:ICARTTFileFormat:WaveListTextWaveMatrix

	SVAR PINameStr = root:ICARTTFileFormat:PINameStr
	
	SVAR MergedSuffixStr = root:ICARTTFileFormat:MergedSuffixStr

	variable idex, numLongDescript
	string str, filenNme, oneLineList
	
	oneLineList = "PINameStr;PIAffiliationStr;DataSourceDescriptionStr;MissionNameStr;"
	oneLineList+="PIContactInfoStr;PlatformSiteInfoStr;LocationInfoStr;AssociatedFileNamesStr;"
	oneLineList+="InstrumentInfoStr;DataInfoStr;UncertaintyInfoStr;ULODValueStr;LLODValueStr;ProjectInfoStr;StipulationsOnUseStr"
		
	Icartt_CheckFileNameStr()
	Icartt_CheckHeaderDate()
	Icartt_CheckRevStr()
 	
	UTCRevisionDateStr = RemoveDoubleSpaces(RemoveCarriageReturns(UTCRevisionDateStr))

// checks UTCRevisionDateStr and the UTCDataStartStr
	Icartt_CheckUTCDateStr(UTCRevisionDateStr, RevDateFlag=1)			//2.13
	Icartt_CheckUTCDateStr(UTCDataStartStr)		
	 	
	str = time2yyyymmddhhmmss(DateTime)
	str = str[0,7]
	string rev_yyyymmdd = revDateToyyyymmdd(UTCRevisionDateStr)	//new call to new function that gets rid of commas and optional spaces.
	//if (cmpstr( StrSubstitute(", ",UTCRevisionDateStr,""), str)!=0)
	if (cmpstr(str, rev_yyyymmdd)!=0)	//should both be yyyymmdd
		DoAlert 1,  "The revision date is not today's date.  Click yes to use the existing revision date, no to abort."
		if (V_flag == 2)
			Abort "The function was cancelled at the user's request - Aborting from Create_CheckSanitizeHead1001"
		endif
	endif

//  Checks the number of dependent parameters.   // no longer necessary, but maybe users will monkey with the table too much?
	numLongDescript=0
	
	for (idex=0; idex<dimsize(WaveListTextWaveMatrix,0); idex+=1)
		if (stringmatch(WaveListTextWaveMatrix[idex][2], "enterUnits")  )			// DTS Oct 2013  A user wanted a blank unit
			Abort "Sensible unit descriptions are required for all chosen waves (Do not use 'enterUnits'. Aborting from Create_CheckSanitizeHead1001"
		elseif (strlen(WaveListTextWaveMatrix[idex][2]) ==0)
			DoAlert 1, "A blank unit for a dependent parameter was encountered.  To continue select yes, to abort select no."
			if (V_flag==2)
				abort "User aborted"
			endif 	
		endif
		if (strlen(WaveListTextWaveMatrix[idex][3]) >0)
			numLongDescript	+=1
		endif
		wave/z wav = $"root:icarttFileFormat:data:"+WaveListTextWaveMatrix[idex][1]
		if (!WaveExists(wav))
			abort "Could not find the wave "+WaveListTextWaveMatrix[idex][1]+". Redo step 1.  aborting from Create_CheckSanitizeHead1001"
		endif
	endfor

	if (numLongDescript!=0 && numLongDescript!=NumVariablesVar+1 )
		Abort "If you choose to use the optional long decriptions of waves you must do so for every wave - Aborting from Create_CheckSanitizeHead1001"
	endif	

	if (NumVariablesVar==0)
		Abort "No dependent parameters were selected  - Aborting from Create_CheckSanitizeHead1001"
	endif
	 	
	if (NumVariablesVar>=500)
		Abort "More than 500 dependent parameters were selected - Aborting from Create_CheckSanitizeHead1001 "
	endif
	
	Create_RemoveExtaLinesAndChars(oneLineList)
	
//  Clean up string parameters that can have more than one carriage return
	SpecialCommentsStr = RemoveTrailingCarriageReturns(SpecialCommentsStr)
	if (strlen(SpecialCommentsStr)==0)
		NumSpecialCommentLinesVar=0
	else
		NumSpecialCommentLinesVar = CountCarriageReturns(SpecialCommentsStr)+1
	endif
	
	OtherCommentsStr =  RemoveTrailingCarriageReturns(OtherCommentsStr)	
	if (CountCarriageReturns(OtherCommentsStr)==0)
		NumOtherCommentsVar = 0
	else
		NumOtherCommentsVar = CountCarriageReturns(OtherCommentsStr)+1	
	endif

//  Check the RevisionStr
	RevisionStr = RemoveTrailingCarriageReturns(RevisionStr)
	idex = CountCarriageReturns(RevisionStr)

	NumOtherCommentsVar = CountCarriageReturns(OtherCommentsStr)
				
	NumNormalCommentLinesVar = 16+ CountCarriageReturns(RevisionStr)+1+(NumOtherCommentsVar) + 1

	NumHeaderLinesVar =12 + NumVariablesVar+(NumSpecialCommentLinesVar+1)+(NumNormalCommentLinesVar+1)  // The last one is the parameter names

	Icartt_CheckFileNameStr()  // checks name of file to be written for illegal chars
	
//  Check the PINameStr
	if (strlen(PINameStr)==0)
		Abort "Please insert a non-empty entry in the PI Name parameter. - Aborting from Create_CheckSanitizeHead1001"
	endif
		
End


// *************************************************
// Loads an icartt file.

Function LoadICARTT1001()

	Icartt_CreateGlobals()
	IcarttPanel_CreateGlobals()
	 	
	SVAR FileNameStr = root:ICARTTFileFormat:FileNameStr
	SVAR FileNameStr4Macs = root:ICARTTFileFormat:FileNameStr4Macs
	
	SVAR FileFormatTypeStr= root:ICARTTFileFormat:FileFormatTypeStr
					
	string fileName
	
	Icartt_SelectFileDialog()	// sets FileNameStr and FileNameStr4macs 
		
	if (cmpstr("Macintosh", IgorInfo(2))==0  )		// Macs can truncate filenames
		FileName = FileNameStr4Macs
	else
		FileName = FileNameStr
	endif
	
	if (strlen(FileName)>0)
								
		Load_GetNumHeaderLinesFileTyp(FileName)
			
		Load_LoadHeader1001(FileName)
		
		Load_IngestHeader1001()
		
		Load_SetDateFromFilename()
		
		Load_LoadData1001(FileName)
		
		Load_HeadertoWaveNote(FileName)
		
		Load_ChangeMissingDoDate1001()
		
	else
		Abort "File was not of the type 1001.  Did not load. - Aborting from LoadICARTT1001"
	endif
	
End


// *************************************************
// Loads only data columns from an icartt file; does not change globals used for subsequent creation of an icartt header.

Function LoadICARTTDataOnly1001()

	Icartt_CreateGlobals()
	IcarttPanel_CreateGlobals()
	 
	SVAR FileFormatTypeStr = root:ICARTTFileFormat:FileFormatTypeStr

	SVAR FileNameStr4Macs= root:ICARTTFileFormat:FileNameStr4Macs
	SVAR FileNameStr= root:ICARTTFileFormat:FileNameStr

	string pathStr, fileName
		
	Icartt_SelectFileDialog()		// sets FileNameStr4Macs and FileNameStr globals
		
	if (cmpstr("Macintosh", IgorInfo(2))==0  )		// Macs can truncate filenames
		fileName = FileNameStr4Macs
	else
		fileName = FileNameStr
	endif

	if (strlen(fileName)>0)
										
		Load_GetNumHeaderLinesFileTyp(fileName)

		if (cmpstr("1001", FileFormatTypeStr) ==0)			
			Load_LoadData1001(fileName)			
		else	
			Abort "File was not of the type 1001.  Did not load - Aborting from Load_Load1001"
		endif

	endif
	
End


// *************************************************
// Sets everything up for subsequent icartt file creation via the icartt panel.

Function CreateICARTT1001()

	Icartt_CreateGlobals()
	IcarttPanel_CreateGlobals()

	SVAR FileNameStr4Macs= root:ICARTTFileFormat:FileNameStr4Macs
	SVAR FileNameStr= root:ICARTTFileFormat:FileNameStr

	string fileName
	
	DoAlert 2, "Click Yes if you would like to load header info from an existing ICARTT file.  \rClick No if you want to use generic default values."
	
	if (V_flag ==1)	// Yes is clicked

		Icartt_SelectFileDialog()	// sets FileNameStr and FileNameStr4macs
			
		if (cmpstr("Macintosh", IgorInfo(2))==0  )		// Macs can truncate filenames
			fileName = FileNameStr4Macs
		else
			fileName = FileNameStr
		endif

		if (strlen(fileName)>0)
			Load_LoadHeader1001(FileName)
			Load_IngestHeader1001()
			IcarttPanel_CreatePanel()
		endif		

	else
		if(V_flag==2) // No is clicked
			 IcarttPanel_CreatePanel()
		endif
	endif
	SVAR RadioValStr = root:ICARTTFileFormat:RadioValStr
	RadioValStr="OtherCommentsStr"	//set global to radio button that is selected by default so that is will work without having to click on selected button again.
End


// *************************************************
// Removes extraneous characters from many global variables and sets some globals that may have been changed from a previous icartt file load.

Function  Create_RemoveExtaLinesAndChars(strList)
	String strList

	SVAR FileFormatTypeStr = root:ICARTTFileFormat:FileFormatTypeStr

	NVAR FileVolumeNumberVar = root:ICARTTFileFormat:FileVolumeNumberVar
	NVAR TotalVolumeNumberVar = root:ICARTTFileFormat:TotalVolumeNumberVar
	NVAR ScaleFactorVar = root:ICARTTFileFormat:ScaleFactorVar
	NVAR MissingDataIndicatorVar = root:ICARTTFileFormat:MissingDataIndicatorVar

	variable idex, num
	
	num = ItemsInList(strList)
		
	FileVolumeNumberVar = 1
	TotalVolumeNumberVar = 1
	ScaleFactorVar = 1
	MissingDataIndicatorVar = -9999

	for(idex=0;idex<num;idex+=1)
		SVAR str = $"root:ICARTTFileFormat:"+StringFromList(idex, strlist )
		if (SVAR_Exists(str)==0)
			Abort "Had problems with the global variable "+StringFromList(idex, strlist )+" - Aborting from Create_RemoveExtaLinesAndChars"
		else
			str = RemoveDoubleSpaces(RemoveCarriageReturns(str))
		endif
	endfor

End


// *************************************************
// Returns a nicely formated yyyy, mm, dd string.
// Ex. print Icartt_TeaseOutDate("2004, 7, 5, 2005, 3, 7", 10) returns 2005, 03, 07
// Ex. print Icartt_TeaseOutDate("2004, 07,5, 2005, 3, 7", 0) returns 2004, 07, 05
// Requires comma delimited values.

Function/S Icartt_TeaseOutDate(str, startPos)
	String str
	Variable startPos
	
	string returnStr = ""
	variable dataStartYear, dataStartMonth, dataStartDay, dataRedYear, dataRedMonth, dataRedDay, year, month, day
		
	try
//		sscanf str, "%d, %d, %d", dataStartYear, dataStartMonth, dataStartDay
		sscanf str, "%d, %d, %d, %d, %d, %d", dataStartYear, dataStartMonth, dataStartDay , dataRedYear, dataRedMonth, dataRedDay
	catch
		try
			sscanf str, "%d, %d, %d", dataStartYear, dataStartMonth, dataStartDay
			dataRedYear=0
			dataRedMonth=0
			dataRedDay=0
	//		sscanf str, "%d, %d, %d, %d, %d, %d", dataStartYear, dataStartMonth, dataStartDay , dataRedYear, dataRedMonth, dataRedDay
		catch
			Abort "Date in incorrectly formatted. Should be yyyy, mm, dd"
		endtry
	endtry
	
	if ((dataStartYear==0) || (dataStartMonth==0) || (dataStartDay==0))
//	if ((dataStartYear==0) || (dataStartMonth==0) || (dataStartDay==0) || (dataRedYear==0) || (dataRedMonth==0) || (dataRedDay==0))  //DTS
		Abort "Date in incorrectly formatted. Should be yyyy, mm, dd and all values should be non-zero."
	endif
	
	if (startPos==0)
		year = dataStartYear
		month = dataStartMonth
		day = dataStartDay
	else
		year = dataRedYear
		month = dataRedMonth
		day = dataRedDay
	endif
	sprintf returnStr, "%d, %02d, %02d", year, month, day
	return returnStr
end


Function Load_HeaderToWaveNote(Filename)
	string Filename
	
	variable n, num
	string icarttHeaderStr, fname
	SVAR VariableNamesList= root:ICARTTFileFormat:VariableNamesList

	icarttHeaderStr = getWaveNote(Filename)	//this function reads the entire header into a string
	num = ItemsInList(VariableNamesList)
	for(n=0; n<num; n+=1)
		fname = stringFromList(n, VariableNamesList)
		note/K $fname					//kill any existing note
		Note $fname, icarttHeaderStr	//write new wave note
	endfor
End


// Reads the entire wavenote into one string rather than into globals for each field. Useful for getting ready to put icartt header into wavenote.
Function/S getWaveNote(thisfile)
	string thisfile
	
	Variable refNum
	String str, wholeNote=""
	variable numlines, i

	// Open file for read.
	Open/R/Z=2/P=IcarttFilePath refNum as thisfile

	// Store results from Open in a safe place.
	Variable err = V_flag

	if (err != 0)
		DoAlert 0, "Error reading header into string. "+ num2str(err)
		Abort
	endif

	FReadLine refNum, str		// Read first line into string variable
	wholeNote+=str
	sscanf str, "%d", numlines
	print "There are ",numlines," lines in the header"

	for (i=0; i<numlines-1; i+=1)
		FReadLine refNum, str		// Read first line into string variable
		wholeNote+=str
	endfor
	
	Close refNum
	return wholeNote
End


// *************************************************
// The functions below are directly related to the Icartt panel


// *************************************************
// Creates root:ICARTTFileFormat:Panel data folder and sets globals here to be used by the icartt panel.

Function IcarttPanel_CreateGlobals()

	string  getFolderStr
	
	getFolderStr = GetDataFolder(1)
	
	NewDataFolder/S/O root:ICARTTFileFormat:Panel
	
	string/g fileNameInfoStr, fileLocInfoStr
	string/g dataIntervalInfoStr
	string/g alternateCreateFileStr, editParamStr, paramInfoStr
	string/g specialCommentsInfoStr, revCommentsInfoStr, otherCommentsInfoStr, normalCommentsInfoStr
	string/g icarttPathStr =""  //gets set via IcarttButtonFilePath or by loading in header info from an existing file.
	
	fileNameInfoStr = ""
	fileNameInfoStr += "* Revision values 'A', 'B', ... = field data; Revision values '0', '1' ... = final data. This value \r"
	fileNameInfoStr += "\tmust equal that given in the REVISION field at the bottom of tab 'Header 2'.\r"
	fileNameInfoStr += "* The yyyymmdd must equal the date value of the first point in the independent parameter."
	
	fileLocInfoStr = ""
	fileLocInfoStr +="* Directories are given on separate lines.\r"
	fileLocInfoStr +="* If blank, a prompt will appear when you\r"
	fileLocInfoStr +="\tclick a Create File button below.\r"
	fileLocInfoStr +="* Use the Change Icartt File Path button \r"
	fileLocInfoStr +="\tto create or change the path.\r"
	fileLocInfoStr +="* If a file with the name above exists in this\r"
	fileLocInfoStr +="\tlocation, it will be overwritten. \r"
	
	dataIntervalInfoStr = "Data Interval is in integer seconds.  Enter 0 for start-stop data."
	
	alternateCreateFileStr  = ""
	alternateCreateFileStr += "* These options are useful when you\r"
	alternateCreateFileStr += "\twant to test settings or create a\r"
	alternateCreateFileStr += "\ttemplate file for a specific project."
	
	editParamStr = ""
	editParamStr += "* To edit text beyond the window display select the radio button, then Edit.\r"
	editParamStr += "* Press Accept in this window when you are ready to transer the text\r"
	editParamStr += "\t - if you simply close the editing box, no text will be transfered.\r"
	editParamStr += "* Parameters with a bold 'R' will retain carriage return values, but\r"
	editParamStr += "\tblank lines will be eliminated.\r"
	editParamStr += "* Do not get fancy in formatting your comments  - do not use bold, italic, \r"
	editParamStr += "\tunderline, greek symbols, etc.; tabs do not translate well across platforms.\r"
	editParamStr += "* Feel free to include journal articles or web sites references if you want\r"
	editParamStr += "\tto provide more details than are possible in the header."
	
	paramInfoStr=""
	paramInfoStr += "Column 0 indicates numerical format; Date/time(t), integer(i), decimal(d) or exponential(e).\r"
	paramInfoStr += "A number after the letter indicates the # of digits after the decimal that will be written.\r"
	paramInfoStr += "Waves with a t format will have the seconds from midnight of the start date subtracted.\r"
	paramInfoStr += "Column 1 is the data wave name and the name of the variable that will be wriiten to the icartt file.\r"
	paramInfoStr += "Column 2 is the mandatory units description.\r"
	paramInfoStr += "Column 3 is the optional long description of the variable."
		
	specialCommentsInfoStr = ""
	specialCommentsInfoStr += "Typically these comments should be reserved for identifying circumstances or\r"
	specialCommentsInfoStr += "treatment of data that is unique to this file.  (i.e. pump failed on this flight..etc)."
		
	revCommentsInfoStr = ""
	revCommentsInfoStr+="Revision comments are cumulative.  Comments for the latest revision should be\r"
	revCommentsInfoStr+="prepended to previous comments i.e. 'R1: fixed bad cal. R0: final data'."
	
	otherCommentsInfoStr=""
	otherCommentsInfoStr +="Typically these comments encompass any info the PI would like to include\r"
	otherCommentsInfoStr+="in every file, such as detailed sampling or anaylsis technical info."
	
	normalCommentsInfoStr = ""
	normalCommentsInfoStr +="* The same instructions from Step 3, part 1 apply.\r"
	normalCommentsInfoStr+="* FYI - The entries below constitute the 'Normal Comments' section in the icartt file."

	SetDataFolder getFolderStr

End

// *************************************************
// Creates the Icartt panel window and all the trappings.

Function IcarttPanel_CreatePanel() 
 
 	DoWindow/F ICARTT_Panel
	if(V_flag == 1)
		DoWindow/K ICARTT_Panel
	endif
		
	WAVE/T WaveListTextWaveMatrix = root:ICARTTFileFormat:WaveListTextWaveMatrix
	
	if ( WaveExists(WaveListTextWaveMatrix)==0 )  
		Abort "Some global values don't exist.  Try creating an Icartt file (first option in menu) instead. Aborting from IcarttPanel_CreatePanel" 
	endif
	
	NVAR FileOpenAfterCreateVar =  root:ICARTTFileFormat:FileOpenAfterCreateVar

	// update the parameters.
	
	FileOpenAfterCreateVar = 0
	
	PauseUpdate; Silent 1		// building window...
	NewPanel /W=(373,318,911,849) as "ICARTT_Panel"
	DoWindow/C ICARTT_Panel
	SetDrawLayer UserBack
	SetDrawEnv fsize= 14,fstyle= 1,textrgb= (16385,16388,65535)
	DrawText 10,20,"ICARTT File Format Tool 2.13"		//2.13
	SetDrawEnv fsize= 10
	DrawText 9,34,"For file formats 1001."

	TabControl IcarttTabControl,pos={6,52},size={480,450},proc=IcarttTabProc_IcarttPanel
	TabControl IcarttTabControl,tabLabel(0)="Select Waves",tabLabel(1)="Header 1"
	TabControl IcarttTabControl,tabLabel(2)="Header 2",tabLabel(3)="Create File"
	TabControl IcarttTabControl,value= 0
	
	// tab 0 select waves
	TitleBox titleboxStep0,pos={15,76},size={447,16},title="Step 0. Create a table of data waves you want put in the icartt file."
	TitleBox titleboxStep0,fSize=14,frame=0,fStyle=1
	TitleBox titleboxStep0A,pos={15,95},size={397,13},title="The left most column must be the time wave (independent variable, typically in UTC)."
	TitleBox titleboxStep0A,fSize=12,frame=0,fStyle=0
	TitleBox titleboxStep0B,pos={15,110},size={359,13},title="Waves must follow strict Igor name rules and can be in different data folders."
	TitleBox titleboxStep0B,fSize=12,frame=0,fStyle=0
	TitleBox titleboxStep1A,pos={15,154},size={365,13},title="The order of waves, number of decimal places, etc will be read from the table."
	TitleBox titleboxStep1A,fSize=12,frame=0,fStyle=0
	TitleBox titleboxStep2,pos={13,191},size={392,16},title="Step 2. Verify the choice of waves, format and enter units."
	TitleBox titleboxStep2,fSize=14,frame=0,fStyle=1
	Button buttonUseTableFormat,pos={15,131},size={350,20},proc=IcarttButton_FormatViaTable,title="Step 1. Select waves and format as in top table"
	Button buttonUseTableFormat,fSize=14,fStyle=1
	TitleBox titleboxParameterFormatInfo,pos={15,245},size={461,86},frame=2
	TitleBox titleboxParameterFormatInfo,variable= root:ICARTTFileFormat:Panel:ParamInfoStr
	SetVariable setvarTableName,pos={15,210},size={200,16},title="Name of top table"
	SetVariable setvarTableName,value= root:ICARTTFileFormat:TableNameStr
	TitleBox titleboxStep1B,pos={16,171},size={434,13},title="2D waves will be parsed into 1D waves; all waves will be duplicated and prepped for writing."
	TitleBox titleboxStep1B,fSize=12,frame=0,fStyle=0
	SetVariable setvarUTCstartdate,pos={239,209},size={210,16},title="Data start date (typically UTC)"
	SetVariable setvarUTCstartdate,value= root:ICARTTFileFormat:UTCDataStartStr
	Button buttonPopTable,pos={401,310},size={70,20},proc=Icartt_popTable,title="Pop Table"

	ListBox listboxVariableNames,pos={15,333},size={462,162}
	ListBox listboxVariableNames,listWave=root:ICARTTFileFormat:WaveListTextWaveMatrix
	ListBox listboxVariableNames,selWave=root:ICARTTFileFormat:SelWaveMatrix
	ListBox listboxVariableNames,titleWave=root:ICARTTFileFormat:TitleWaveMatrix
	ListBox listboxVariableNames,mode= 0,selRow= 1,editStyle= 1
	ListBox listboxVariableNames,widths={15,60,60,100}

	// tab 1 header part 1 
	TitleBox titleboxHeaderpart1,pos={20,80},size={50,20}, disable=1,title="Step 3, part 1.  Edit Header Info"
	TitleBox titleboxHeaderpart1,fSize=14,frame=0,fStyle=1
	TitleBox titleboxstep3InfoStr,pos={20,103},size={351,108},disable=1,frame=0
	TitleBox titleboxstep3InfoStr,variable= root:ICARTTFileFormat:Panel:editParamStr
	SetVariable setVarPINameStr,pos={22,249},size={420,15},disable=1,title="PI Name"
	SetVariable setVarPINameStr,value= root:ICARTTFileFormat:PINameStr
	SetVariable setVarPIAffiliationStr,pos={22,271},size={420,15},disable=1,title="PI Affiliation"
	SetVariable setVarPIAffiliationStr,value= root:ICARTTFileFormat:PIAffiliationStr
	SetVariable setVarDataSourceDescriptionStr,pos={22,293},size={420,15},disable=1,title="Data Source Description"
	SetVariable setVarDataSourceDescriptionStr,value= root:ICARTTFileFormat:DataSourceDescriptionStr
	SetVariable setVarMissionNameStr,pos={22,317},size={420,15},disable=1,title="Mission Name"
	SetVariable setVarMissionNameStr,value= root:ICARTTFileFormat:MissionNameStr
	SetVariable setVarUTCRevisionDateStr,pos={22,339},size={420,15},disable=1,title="Revision Date In yyyy, mm, dd"
	SetVariable setVarUTCRevisionDateStr,value= root:ICARTTFileFormat:UTCRevisionDateStr
	SetVariable setVarDataIntervalVar,pos={22,363},size={420,15},disable=1,title="Data Interval"
	SetVariable setVarDataIntervalVar,limits={0,inf,1},value= root:ICARTTFileFormat:DataIntervalVar
	SetVariable setVarSpecialCommentsStr,pos={22,403},size={420,15},disable=1,title="Special Comments"
	SetVariable setVarSpecialCommentsStr,value= root:ICARTTFileFormat:SpecialCommentsStr
	TitleBox titleboxDataIntervalInfo,pos={154,381},size={288,12},disable=1,frame=0
	TitleBox titleboxDataIntervalInfo,variable= root:ICARTTFileFormat:Panel:dataIntervalInfoStr
	TitleBox titleboxSpecialCommentInfo,pos={77,420},size={360,24},disable=1,frame=0
	TitleBox titleboxSpecialCommentInfo,variable= root:ICARTTFileFormat:Panel:SpecialCommentsInfoStr
	TitleBox titleboxSpecialCommentsR,pos={463,405},size={9,17},disable=1,title="R"
	TitleBox titleboxSpecialCommentsR,fSize=14,frame=0,fStyle=1
	CheckBox radioPIAffiliation,pos={445,269},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioPIAffiliation,value= 0,mode=1
	CheckBox radioDataSourceDescription,pos={445,293},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioDataSourceDescription,value= 0,mode=1
	CheckBox radioSpecialComments,pos={445,406},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioSpecialComments,value= 0,mode=1

	Button buttonEditParamStr,pos={426,81},size={50,20},disable=1,proc=IcarttButton_EditParam,title="Edit"
	Button buttonAcceptParamStr,pos={427,107},size={50,20},disable=1,proc=IcarttButton_AcceptParam,title="Accept"

	// tab 1 header part 2 
	TitleBox titleboxHeaderpart2,pos={20,80},size={250,17},disable=1,title="Step 3, part 2. Edit Header Info"
	TitleBox titleboxHeaderpart2,fSize=14,frame=0,fStyle=1
	TitleBox titleboxNormalCommentsInfo,pos={17,103},size={358,24},disable=1,frame=0
	TitleBox titleboxNormalCommentsInfo,variable= root:ICARTTFileFormat:Panel:NormalCommentsInfoStr
	
	SetVariable setVarPIContactInfoStr,pos={20,147},size={420,15},disable=1,title="PI_CONTACT_INFO"
	SetVariable setVarPIContactInfoStr,value= root:ICARTTFileFormat:PIContactInfoStr
	SetVariable setVarPlatformSiteInfoStr,pos={20,167},size={420,15},disable=1,title="PLATFORM"
	SetVariable setVarPlatformSiteInfoStr,value= root:ICARTTFileFormat:PlatformSiteInfoStr
	SetVariable setVarLocationInfoStr,pos={20,187},size={420,15},disable=1,title="LOCATION"
	SetVariable setVarLocationInfoStr,value= root:ICARTTFileFormat:LocationInfoStr
	SetVariable setVarAssociatedFileNamesStr,pos={20,207},size={420,15},disable=1,title="ASSOCIATED_DATA"
	SetVariable setVarAssociatedFileNamesStr,value= root:ICARTTFileFormat:AssociatedFileNamesStr
	SetVariable setVarInstrumentInfoStr,pos={20,227},size={420,15},disable=1,title="INSTRUMENT_INFO"
	SetVariable setVarInstrumentInfoStr,value= root:ICARTTFileFormat:InstrumentInfoStr
	SetVariable setVarDataInfoStr,pos={20,247},size={420,15},disable=1,title="DATA_INFO"
	SetVariable setVarDataInfoStr,value= root:ICARTTFileFormat:DataInfoStr
	SetVariable setVarUncertaintyInfoStr,pos={20,267},size={420,15},disable=1,title="UNCERTAINTY"
	SetVariable setVarUncertaintyInfoStr,value= root:ICARTTFileFormat:UncertaintyInfoStr
	SetVariable setVarULODValueStr,pos={20,287},size={420,15},disable=1,title="ULOD_VALUE"
	SetVariable setVarULODValueStr,value= root:ICARTTFileFormat:ULODValueStr
	SetVariable setVarLLODValueStr,pos={20,307},size={420,15},disable=1,title="LLOD_VALUE"
	SetVariable setVarLLODValueStr,value= root:ICARTTFileFormat:LLODValueStr
	SetVariable setVarDataManagerContactInfoStr,pos={20,326},size={420,15},disable=1,title="DM_CONTACT_INFO"
	SetVariable setVarDataManagerContactInfoStr,value= root:ICARTTFileFormat:DataManagerContactInfoStr
	SetVariable setVarProjectInfoStr,pos={20,348},size={420,15},disable=1,title="PROJECT_INFO"
	SetVariable setVarProjectInfoStr,value= root:ICARTTFileFormat:ProjectInfoStr
	SetVariable setVarStipulationsOnUseStr,pos={19,368},size={420,15},disable=1,title="STIPULATIONS_ON_USE"
	SetVariable setVarStipulationsOnUseStr,value= root:ICARTTFileFormat:StipulationsOnUseStr
	SetVariable setVarOtherCommentsStr,pos={19,388},size={420,15},disable=1,title="OTHER_COMMENTS"
	SetVariable setVarOtherCommentsStr,value= root:ICARTTFileFormat:OtherCommentsStr
	SetVariable setVarRevisionNumberStr,pos={20,435},size={420,15},disable=1,title="REVISION"
	SetVariable setVarRevisionNumberStr,value= root:ICARTTFileFormat:RevisionNumberStr
	SetVariable setVarRevisionStr,pos={21,456},size={420,15},disable=1,title="Rev Comments"
	SetVariable setVarRevisionStr,value= root:ICARTTFileFormat:RevisionStr
	TitleBox titleboxOtherCommentsStr,pos={105,405},size={330,24},disable=1,frame=0
	TitleBox titleboxOtherCommentsStr,variable= root:ICARTTFileFormat:Panel:OtherCommentsInfoStr
	TitleBox titleboxRevCommentsInfo,pos={77,473},size={358,24},disable=1,frame=0
	TitleBox titleboxRevCommentsInfo,variable= root:ICARTTFileFormat:Panel:RevCommentsInfoStr
	CheckBox radioPIContactInfo,pos={444,148},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioPIContactInfo,value= 0,mode=1
	CheckBox radioLocationInfo,pos={444,188},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioLocationInfo,value= 0,mode=1
	CheckBox radioInstrumentInfo,pos={444,227},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioInstrumentInfo,value= 0,mode=1
	CheckBox radioDataInfo,pos={444,247},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioDataInfo,value= 0,mode=1
	CheckBox radioUncertaintyInfo,pos={444,268},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioUncertaintyInfo,value= 0,mode=1
	CheckBox radioStipulationsOnUse,pos={444,369},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioStipulationsOnUse,value= 0,mode=1
	CheckBox radioOtherComments,pos={444,389},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioOtherComments,value= 1,mode=1
	CheckBox radioRevisionComments,pos={445,457},size={16,14},disable=1,proc=IcarttCheck_RadioComments,title=""
	CheckBox radioRevisionComments,value= 0,mode=1
	TitleBox titleboxOtherCommentsR,pos={460,386},size={9,17},disable=1,title="R"
	TitleBox titleboxOtherCommentsR,fSize=14,frame=0,fStyle=1
	TitleBox titleboxRevisionCommentsR,pos={460,453},size={9,17},disable=1,title="R"
	TitleBox titleboxRevisionCommentsR,fSize=14,frame=0,fStyle=1
	// tab 3  create file	
	
	TitleBox titleboxStep4,pos={20,80},size={161,17},disable=1,title="Step 4. Create a file"
	TitleBox titleboxStep4,fSize=14,frame=0,fStyle=1
	
	GroupBox groupFileName,pos={20,100},size={451,75},disable=1,title="File Name"
	GroupBox groupFileName,fStyle=1
	SetVariable setVarFileName,pos={30,116},size={430,15},disable=1,title="DataID_Platform_yyyymmdd_Rx_(OptionalMerge).ict"
	SetVariable setVarFileName,value= root:ICARTTFileFormat:FileNameStr
	TitleBox titleboxFileNameInfo,pos={30,133},size={417,48},disable=1,frame=0
	TitleBox titleboxFileNameInfo,fStyle=0
	TitleBox titleboxFileNameInfo,variable= root:ICARTTFileFormat:Panel:fileNameInfoStr
	
	GroupBox groupFileLocation,pos={20,179},size={400,150},disable=1,title="File Location"
	GroupBox groupFileLocation,fStyle=1
	TitleBox titleboxFileLocationInfo,pos={30,195},size={188,60},disable=1,frame=0
	TitleBox titleboxFileLocationInfo,variable= root:ICARTTFileFormat:Panel:fileLocInfoStr
	TitleBox titleboxIcarttPath,pos={234,196},size={118,116},disable=1
	TitleBox titleboxIcarttPath,variable= root:ICARTTFileFormat:Panel:icarttpathstr
	Button buttonIcarttFilePath,pos={30,290},size={180,20},disable=1,proc=IcarttButton_IcarttFilePath,title="Change Icartt File Location"

	CheckBox checkFileOpenAfterCreate,pos={25,333},size={290,14},disable=1,proc=IcarttCheck_OpenAfterCreate,title="Open and view file after creation? (File will not be editable.)"
	CheckBox checkFileOpenAfterCreate,variable= root:ICARTTFileFormat:FileOpenAfterCreateVar
	
	Button buttonCreate,pos={25,357},size={180,100},disable=1,proc=IcarttButton_CreateFile,title="Create ICARTT File"

	GroupBox groupCreateFileAlternatives,pos={216,350},size={206,111},disable=1,title="Alternatives"
	TitleBox titleboxAlternateFileCreate,pos={233,366},size={168,36},disable=1,frame=0
	TitleBox titleboxAlternateFileCreate,variable= root:ICARTTFileFormat:Panel:AlternateCreateFileStr
	Button buttonCreateHeader,pos={228,409},size={180,20},disable=1,proc=IcarttButton_CreateHead,title="Create Header File Only"
	Button buttonCreateData,pos={228,434},size={180,20},disable=1,proc=IcarttButton_CreateData,title="Create Data File Only"

	TitleBox titleboxStep5,pos={26,469},size={324,17},disable=1,title="Step 5 (Optional). Close ICARTT_Panel ->"
	TitleBox titleboxStep5,fSize=14,frame=0,fStyle=1
	Button buttonExit,pos={360,469},size={50,20},disable=1,proc=IcarttButton_Exit,title="Exit"

	IcarttTabProc_IcarttPanel("", 0)

End

// *************************************************
// Dictates which controls are displayed (disabled) when the user selects a tab.

Function IcarttTabProc_IcarttPanel(ctrlname, tabNum) : TabControl
	String ctrlName
	Variable tabNum

	variable isTab0 = (tabnum==0)
	variable isTab1 = (tabnum==1)
	variable isTab2 = (tabnum==2)
	variable isTab3 = (tabnum==3)
			
	ModifyControlList "listboxVariableNames;buttonUseTableFormat;setvarTableName;" disable = !isTab0 
	ModifyControlList "titleboxParameterFormatInfo;setvarUTCstartdate;buttonPopTable;" disable = !isTab0 
	
	TitleBox titleboxStep0 disable= !isTab0 
	TitleBox titleboxStep0A disable= !isTab0 
	TitleBox titleboxStep0B disable= !isTab0 
	TitleBox titleboxStep1A disable= !isTab0 
	TitleBox titleboxStep1B disable= !isTab0 
	TitleBox titleboxStep2 disable= !isTab0 
	
	// hide or show tab1 - Header 1
	
	ModifyControlList "setVarPINameStr;setVarPIAffiliationStr;setVarDataSourceDescriptionStr;" disable = !isTab1
	ModifyControlList "setVarMissionNameStr;setVarUTCRevisionDateStr;setVarDataIntervalVar;setVarSpecialCommentsStr" disable = !isTab1
	
	ModifyControlList "buttonEditParamStr;buttonAcceptParamStr" disable = !isTab1

	ModifyControlList "radioPIAffiliation;radioDataSourceDescription;radioSpecialComments" disable = !isTab1

	TitleBox titleboxHeaderpart1 disable = !isTab1
	TitleBox titleboxHeader1Part1 disable = !isTab1
	TitleBox titleboxHeader1Part2 disable = !isTab1
	TitleBox titleboxDataIntervalInfo disable = !isTab1
	TitleBox titleboxSpecialCommentInfo disable = !isTab1
	 
	TitleBox titleboxstep3InfoStr disable = !isTab1

	Titlebox titleboxSpecialCommentsR disable = !isTab1

	// hide or show tab2 - Header 2

	ModifyControlList "setVarPIContactInfoStr;setVarPlatformSiteInfoStr;setVarLocationInfoStr" disable = !isTab2
	ModifyControlList "setVarAssociatedFileNamesStr;setVarInstrumentInfoStr;setVarDataInfoStr" disable = !isTab2
	ModifyControlList "setVarUncertaintyInfoStr;setVarULODValueStr;setVarLLODValueStr" disable = !isTab2
	ModifyControlList "setVarDataManagerContactInfoStr;setVarProjectInfoStr;setVarStipulationsOnUseStr" disable = !isTab2
	ModifyControlList "setVarOtherCommentsStr;setVarRevisionNumberStr;setVarRevisionStr" disable = !isTab2
	
	TitleBox titleboxHeaderpart2 disable = !isTab2

	TitleBox titleboxRevCommentsInfo disable = !isTab2
	TitleBox titleboxOtherCommentsStr disable = !isTab2

	TitleBox titleboxNormalCommentsInfo disable = !isTab2

	ModifyControlList "radioPIContactInfo;radioLocationInfo;radioInstrumentInfo;radioDataInfo;radioUncertaintyInfo;"  disable = !isTab2
	ModifyControlList "radioStipulationsOnUse;radioOtherComments;radioRevisionComments" disable = !isTab2

	Titlebox titleboxOtherCommentsR disable = !isTab2
	TitleBox titleboxRevisionCommentsR disable = !isTab2

	// hide or show tab1or2
	
	ModifyControlList "buttonEditParamStr;buttonAcceptParamStr" disable = (!isTab2 && !isTab1)

	// hide or show tab3 - Create File

	ModifyControlList "checkFileOpenAfterCreate" disable = !isTab3
	ModifyControlList "buttonCreate;buttonCreateHeader;buttonCreateData" disable = !isTab3

	TitleBox titleboxStep4 disable= !isTab3

	ModifyControlList "buttonIcarttFilePath" disable = !isTab3
	ModifyControlList "groupFileName;groupFileLocation;groupCreateFileAlternatives" disable = !isTab3
	
	TitleBox titleboxAlternateFileCreate  disable= !isTab3

	ModifyControlList "setVarFileName;buttonExit;titleboxFileNameInfo" disable = !isTab3

	TitleBox titleboxFileLocationInfo disable= !isTab3
	TitleBox titleboxIcarttPath disable= !isTab3
	
	TitleBox titleboxStep5 disable= !isTab3

End


// *************************************************
// Calls other functions to do the work in implementing the format via table option.
// button on 1st tab of icartt_panel.  Fills in the 2D text wave WaveListTextWaveMatrix and does minimal error checking.
// Sets IndependentVariableNameStr, UTCDataStartVar, VariableNamesList, NumVariablesVar, TableNameStr, DataIntervalVar
Function IcarttButton_FormatViaTable(ctrlName) : ButtonControl
	String ctrlName
	
	WAVE/T WaveListTextWaveMatrix= root:ICARTTFileFormat:WaveListTextWaveMatrix		// 4 dimensional beast appearing in first tab
	wave SelWaveMatrix= root:ICARTTFileFormat:SelWaveMatrix		// 4 dimensional beast to allow editing

	NVAR MissingDataIndicatorVar = root:ICARTTFileFormat:MissingDataIndicatorVar

	SVAR TableNameStr = root:ICARTTFileFormat:TableNameStr
	SVAR IndependentVariableNameStr= root:ICARTTFileFormat:IndependentVariableNameStr
	SVAR IndependentVariableFormatStr= root:ICARTTFileFormat:IndependentVariableFormatStr
	SVAR VariableNamesList = root:ICARTTFileFormat:VariableNamesList
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	SVAR UTCDataStartStr = root:ICARTTFileFormat:UTCDataStartStr
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar
	NVAR DataIntervalVar = root:ICARTTFileFormat:DataIntervalVar
	
	string  myWaveStr, myWaveInfo, myColInfo, formatStr, digitsStr,UnitsStr, formatList	
	string colNameStr, tableInfoStr, combinedFormatStr
	variable myIndex, myNum,  numCols, numRows, idex, numWaves, waveNumCol, jdex
	
	TableNameStr = WinName(0,2)		// top table
	if (strlen(TableNameStr)==0)
		Abort "there is no top table.  Aborting from IcarttButton_FormatViaTable"
	endif
			
	tableInfoStr = TableInfo(TableNameStr, -2)		// get info about entire table
	numCols=numberByKey("COLUMNS", tableInfoStr)-1
	if (numCols==0)
		// so far as I understand we always have a point column and it is column number -1
		abort "There does not seem to be any data waves in the top most table named "+TableNameStr+".  Aborting from IcarttButton_FormatViaTable"
	endif
	
	if (numCols>=500)		// 500 is arbitrary
		Abort "More than 500 parameters were selected; this is too much - Aborting from IcarttButton_FormatViaTable "
	endif

	redimension/n=(numCols, 4) WaveListTextWaveMatrix, SelWaveMatrix		// make sure it is big enough.  We don't include independent parameter
	
	// goal of this for loop is to 
	// get format values, wave names and put into WaveListTextWaveMatrix
	// prep data by breaking up 2D waves and prepping data
	formatList=""
	VariableNamesList=""
	numRows=0
	
	NewDataFolder/o root:ICARTTFileFormat:Data
	
	for(idex=0;idex<numCols;idex+=1)		// number of columns in the table... could equal the number of dependent parameters
		
		tableInfoStr = TableInfo(TableNameStr, idex)		// get info about column idex
	 	myWaveStr=StringByKey("WAVE", tableInfoStr)		// can be in different data folders... string has the full path
		formatStr = StringByKey("FORMAT", tableInfoStr)
		DigitsStr = StringByKey("DIGITS", tableInfoStr)

	 	Wave/Z wav = $myWaveStr  // can be in different data folders... string has the full path 	
	       if (!WaveExists(wav))		// should never happen
			abort "Wave"+myWaveStr+" doesn't seem to exist.  Aborting from IcarttButton_FormatViaTable"
	  	else
			UnitsStr = StringByKey("DUNITS", WaveInfo(wav,0))	
			formatStr = SelectString (stringmatch(UnitsStr, "dat") , formatStr, "t") 	
	  	endif	
		
		// do not allow 'general' format cuz we won't know the number of digits of precision
		if (stringmatch(formatStr, "0"))		
			abort "Column "+num2str(idex)+", "+myWaveStr+",  is using a 'general' format.  Please select a different format so that the number of decimal places or significant digits is clear.   Aborting from IcarttButton_FormatViaTable" 
		endif
		
		combinedFormatStr = Icartt_FormatStr(formatStr, DigitsStr)	

		// check for defects in the first column, the time wave, the independent variable.
		if (idex==0)
			if (NumberByKey("NUMTYPE",  WaveInfo(wav,0))!=4)		// must be double precision
				abort "The first column, which should be the time wave, is not double precision.  Aborting from IcarttButton_FormatViaTable"
			endif
			if (dimsize(wav,1)>0 || dimsize(wav,0)==0)
				abort "The time wave must not be 2 dimensional and must have more than one point.  Aborting from IcarttButton_FormatViaTable"
			endif	
			UTCDataStartVar = wav[0] - mod(wav[0], 86400)		// could get wierd for leap year seconds?
			numRows = numpnts(wav)
			duplicate/o/free wav wavDiff
			wavDiff = wav[p] - wav[p-1]
			wavDiff[0] =wavDiff[1]
			WaveStats/q/m=1 wavDiff
			if (v_min<=0 || V_npnts!=numRows || V_numNans>0)		// we have duplicate times or we have nans in time
				WaveStats/m=1 wavDiff
				abort "There is a problem of nonmonoticity with the time wave at point number "+num2str(V_minLoc) +" or at another point.  Aborting from IcarttButton_FormatViaTable"  
			endif 
			if (V_min==V_max)
				DataIntervalVar=V_min
			else
				DataIntervalVar=0		// a decent default
			endif
			
			// finally! we verify that this is a good time wave	
			IndependentVariableNameStr=NameofWave(wav)	//				
			IndependentVariableFormatStr = Icartt_FormatStr(formatStr, DigitsStr)
		
			Duplicate/o wav $"root:ICARTTFileFormat:Data:"+ nameOfWave(wav) /Wave = DuplicatedWave
			DuplicatedWave-=UTCDataStartVar
			
			// sets the UTCDateStartString
			string tempStr  //DTS
			tempStr = time2yyyymmddhhmmss(UTCDataStartVar)
			tempStr[8,strlen(UTCDataStartStr)-1] = ""		// truncates string
			UTCDataStartStr = tempStr[0,3]+", "+ tempStr[4,5] +", "+ tempStr[6,7]

			// DTS
			
			WaveListTextWaveMatrix[idex][0] = combinedFormatStr
			WaveListTextWaveMatrix[idex][1] = IndependentVariableNameStr	
			WaveListTextWaveMatrix[idex][2] = "seconds_past_midnight"	
			// notice that we do not put the independent variable into the VariableNamesList

		else		// can either be another time wave (start stop data) or a dependent parameter
			waveNumCol = dimSize(wav, 1)
			
			// sanity checks
			// check that all waves have the same number of rows.
			if (dimsize(wav,0) != numRows)
				abort "The number of rows in wave "+NameofWave(wav) +" must be the same as in the first column.  Aborting from IcarttButton_FormatViaTable"
			endif
			// check that it is a nice 2D and not a 3D
			if(dimsize(wav,2)>0)	// 3D wave abort!
				abort "Wave"+myWaveStr+" is 3D, can't process!.  Aborting from IcarttButton_FormatViaTable"
			elseif(waveNumCol==1)	// 2D wave with only one column, abort!
				abort "Wave"+NameofWave(wav) +" is 2D, but there is only one column!  Aborting from IcarttButton_FormatViaTable"
			endif
						
			if (waveNumCol==0)	// 1D wave
				Duplicate/o wav $"root:ICARTTFileFormat:Data:"+ nameOfWave(wav) /Wave = DuplicatedWave
				ChangeNans(DuplicatedWave,MissingDataIndicatorVar)
				WaveListTextWaveMatrix[idex][0] = combinedFormatStr
				WaveListTextWaveMatrix[idex][1] = NameofWave(wav) 	
				VariableNamesList+=NameofWave(wav) +";"
				if ((stringmatch(formatStr, "t")) || (stringmatch(formatStr, "8")))	// presumes there is no 2D wave with time/date info. Do when wave scaling is set to "dat" ("t") case, or when time format is specified ("8") in table.
					DuplicatedWave-=UTCDataStartVar
					WaveListTextWaveMatrix[idex][2]	= "seconds_past_midnight"	
				else
					WaveListTextWaveMatrix[idex][2]= selectString ( strlen(UnitsStr)>0 || strlen(WaveListTextWaveMatrix[p][2])>0,"EnterUnits", WaveListTextWaveMatrix[p][2] ) 
				endif
			else	// 2D wave with > one column
				for (jdex=0;jdex<waveNumCol;jdex+=1)
					MatrixOP/o  $"root:ICARTTFileFormat:Data:"+ nameOfWave(wav)+"_"+num2str(jdex) = col(wav,jdex)
					wave DuplicatedWave = $"root:ICARTTFileFormat:Data:"+ nameOfWave(wav)+"_"+num2str(jdex)  
					ChangeNans(DuplicatedWave,MissingDataIndicatorVar)
					WaveListTextWaveMatrix[idex+jdex][0] = combinedFormatStr
					WaveListTextWaveMatrix[idex+jdex][1] = NameofWave(wav) +"_"+num2str(jdex)	
					VariableNamesList+=NameofWave(wav)+"_"+num2str(jdex) +";"
					WaveListTextWaveMatrix[idex+jdex][2]= selectString ( strlen(UnitsStr)>0 || strlen(WaveListTextWaveMatrix[p][2])>0,"EnterUnits", WaveListTextWaveMatrix[p][2] ) 
				endfor
		 		idex += waveNumCol-1 // (the for loop will add a one)
			endif					
		endif		// first column (independent parameter) or data column
		
	endfor
	
	if (itemsInLIst(VariableNamesList)+1 != numCols)
		abort "Something went wrong with the parsing of the table.  Aborting from IcarttButton_FormatViaTable"
	endif

	NumVariablesVar=numCols-1		// don't include independent param

	SelWaveMatrix=2			// all cells are editable
	SelWaveMatrix[][1]=0		// make wave selection uneditable	

	SetDimLabel 1,0,format, root:IcarttFileFormat:WaveListTextWaveMatrix
	SetDimLabel 1,1,wavename, root:IcarttFileFormat:WaveListTextWaveMatrix
	SetDimLabel 1,2,units, root:IcarttFileFormat:WaveListTextWaveMatrix
	SetDimLabel 1,3,optional_long_description, root:IcarttFileFormat:WaveListTextWaveMatrix

	//1.12 addition by DTS
	SVAR FileNameStr =  $"root:ICARTTFileFormat:FileNameStr"
	SVAR UTCDataStartStr =  $"root:ICARTTFileFormat:UTCDataStartStr"
	string UTCNoSpace = ReplaceString(",",  ReplaceString(" ", UTCDataStartStr, ""), "")
	FileNameStr = ReplaceString(StringFromList(2,FileNameStr, "_" ),  FileNameStr, UTCNoSpace)
End


// *************************************************
// Creates an icartt formatted file.

Function IcarttButton_CreateFile(ctrlName) : ButtonControl
	String ctrlName
		
	NVAR FileOpenAfterCreateVar =  $"root:ICARTTFileFormat:FileOpenAfterCreateVar"
	SVAR FileNameStr =  $"root:ICARTTFileFormat:FileNameStr"
	SVAR FileNameStr4Macs =  $"root:ICARTTFileFormat:FileNameStr4Macs"
		
	Create_CreateHeader()
	Create_AppendData2Header()
	
	If (FileOpenAfterCreateVar==1)
		OpenNotebook/r/k=1/p=ICARTTFilePath	 FileNameStr	
	endif

End


// *************************************************
//  Creates and icartt formatted header file.

Function IcarttButton_CreateHead(ctrlName) : ButtonControl
	String ctrlName

	NVAR FileOpenAfterCreateVar =  root:ICARTTFileFormat:FileOpenAfterCreateVar
	SVAR FileNameStr =  root:ICARTTFileFormat:FileNameStr
		
	Create_CreateHeader()

	If (FileOpenAfterCreateVar==1)
		OpenNotebook/n=ICARTTHeaderFile/r/k=1/p=ICARTTFilePath FileNameStr
	endif

End


// *************************************************
//  Creates and icartt formatted data file with no header.

Function IcarttButton_CreateData(ctrlName) : ButtonControl
	String ctrlName

	SVAR FileNameStr = $"root:ICARTTFileFormat:FileNameStr"
	NVAR FileOpenAfterCreateVar =  $"root:ICARTTFileFormat:FileOpenAfterCreateVar"
	
	Create_AppendData2Header()

	If (FileOpenAfterCreateVar==1)
		OpenNotebook/r/k=1/p=ICARTTFilePath	 FileNameStr	
	endif

End


// *************************************************
// Sets global variable FileOpenAfterCreateVar.

Function IcarttCheck_OpenAfterCreate(name, value) : CheckBoxControl
	String name
	Variable value

	NVAR FileOpenAfterCreateVar = root:ICARTTFileFormat:FileOpenAfterCreateVar
	FileOpenAfterCreateVar = value

End


// *************************************************
// Prompts user to select a new icartt file path.

Function IcarttButton_IcarttFilePath(ctrlName) : ButtonControl
	String ctrlName
	
	SVAR IcarttPathStr = root:ICARTTFileFormat:Panel:IcarttPathStr
	
	NewPath/Q/o/m="Please select a folder where the icartt file will be placed." IcarttFilePath
	if (V_flag==0)	// update only if a path was selected.
		IcarttPathStr = convertpathstr("IcarttFilePath")
	endif
	
	ControlUpdate titleboxIcarttPath
	DoUpdate
	
End


// *************************************************
// Sets globals for when a user wants to edit text beyond the display window.

Function IcarttCheck_RadioComments(name, value) : CheckBoxControl
	String name
	Variable value

	SVAR RadioValStr = root:ICARTTFileFormat:RadioValStr
	
	strswitch(name)
		case  "radioPIAffiliation":
			RadioValStr = "PIAffiliationStr"
			break
		case  "radioDataSourceDescription":
			RadioValStr = "DataSourceDescriptionStr"
			break
		case  "radioSpecialComments":
			RadioValStr = "SpecialCommentsStr"
			break

		case  "radioPIContactInfo":
			RadioValStr = "PIContactInfoStr"
			break
		case  "radioLocationInfo":
			RadioValStr = "LocationInfoStr"
			break
		case  "radioInstrumentInfo":
			RadioValStr = "InstrumentInfoStr"
			break
		case  "radioDataInfo":
			RadioValStr = "DataInfoStr"
			break
		case  "radioUncertaintyInfo":
			RadioValStr = "UncertaintyinfoStr"
			break
		case  "radioStipulationsOnUse":
			RadioValStr = "StipulationsOnUseStr"
			break
		case  "radioOtherComments":
			RadioValStr = "OtherCommentsStr"
			break
		case  "radioRevisionComments":
			RadioValStr = "RevisionStr"
			break

	endswitch
		
	CheckBox radioPIAffiliation, value =  !cmpstr(RadioValStr, "PIAffiliationStr")
	CheckBox radioDataSourceDescription, value =  !cmpstr(RadioValStr, "DataSourceDescriptionStr")
	CheckBox radioSpecialComments, value =  !cmpstr(RadioValStr, "SpecialCommentsStr")

	CheckBox radioPIContactInfo, value =  !cmpstr(RadioValStr, "PIContactInfoStr")
	CheckBox radioLocationInfo, value =  !cmpstr(RadioValStr, "LocationInfoStr")
	CheckBox radioInstrumentInfo, value =  !cmpstr(RadioValStr, "InstrumentInfoStr")
	CheckBox radioDataInfo, value =  !cmpstr(RadioValStr, "DataInfoStr")
	CheckBox radioUncertaintyInfo, value =  !cmpstr(RadioValStr, "UncertaintyinfoStr")
	CheckBox radioStipulationsOnUse, value =  !cmpstr(RadioValStr, "StipulationsOnUseStr")
	CheckBox radioOtherComments, value =  !cmpstr(RadioValStr, "OtherCommentsStr")
	CheckBox radioRevisionComments, value =  !cmpstr(RadioValStr, "RevisionStr")

End


// *************************************************
// Creates and editing window for user comments and other header info.

Function IcarttButton_EditParam(ctrlName) : ButtonControl
	String ctrlName
	
	SVAR RadioValStr = root:ICARTTFileFormat:RadioValStr
	
	if (strlen(RadioValStr) > 0)
		SVAR ThisParam = $"root:ICARTTFileFormat:"+RadioValStr
		DoWindow/K EditTextBox
		NewNotebook/F=0/W=(462,145,1050,310)/k=1/n=EditTextBox as "EditTextBox"
		Notebook EditTextBox  text = ThisParam
	else
		Abort "Please click a radio button before the edit button. - Aborting from IcarttButton_EditParam"
	endif
End


// *************************************************
// Transfers the text of the editing window into the global string variable.

Function IcarttButton_AcceptParam(ctrlName) : ButtonControl
	String ctrlName

	DoWindow/F EditTextBox
	if (V_flag==0)
		Abort "The EditTextBox isn't open so nothing was accepted. - Aborting from IcarttButton_AcceptParam"
	endif

	SVAR RadioValStr = $"root:ICARTTFileFormat:RadioValStr"
	SVAR ThisParam = $"root:ICARTTFileFormat:"+RadioValStr

	if (SVAR_Exists(ThisParam)==0)
		Abort "Something is wrong with the radio value. Verify that  "+ThisParam+" was checked. - Aborting from IcarttButton_AcceptParam"		
	endif

	string CheckBoxListNoCRLF, CheckBoxListYesCRLF
	
	CheckBoxListNoCRLF=""
	CheckBoxListNoCRLF += "PIAffiliationStr;DataSourceDescriptionStr;"
	CheckBoxListNoCRLF += "PIContactInfoStr;LocationInfoStr;InstrumentInfoStr;DataInfoStr;"
	CheckBoxListNoCRLF += "UncertaintyinfoStr;StipulationsOnUseStr;"

	CheckBoxListYesCRLF = ""
	CheckBoxListYesCRLF += "SpecialCommentsStr;OtherCommentsStr;RevisionStr"  // not used, just for reference
	
	Notebook EditTextBox selection = {startofFile, endOfFile}
	GetSelection notebook, EditTextBox, 2
	
	if (FindListItem(RadioValStr, CheckBoxListNoCRLF, ";", 0) >= 0 )
		ThisParam = RemoveCarriageReturns(S_Selection)
	else
		ThisParam = RemoveTrailingCRorLF(S_Selection)	
	endif
	
	DoWindow/K EditTextBox

End


// *************************************************
// Transfers info from text wave into TextMatrix2D.  
// Called from IcarttPopup_IndepVarName.

Function Icartt_Reorganize2DTextMatrix(TextMatrix2D, Textwave)
	Wave/t TextMatrix2D, Textwave

	variable i, numRows = numpnts(Textwave)
		
	make/o/t/n=(numRows,2) NewTextMatrix2D
	
	for(i=0;i<numRows;i+=1)
		NewTextMatrix2D[i][0] = "1"
		NewTextMatrix2D[i][1] = Textwave[i]
	endfor
	
	TextMatrix2D = NewTextMatrix2D
	
	Killwaves NewTextMatrix2D

End


// *************************************************
// Provides a clean way to exit the panel for those who may be unsure.

Function IcarttButton_Exit(ctrlName) : ButtonControl
	String ctrlName

	DoWindow/K ICARTT_Panel
	DoWindow/K EditTextBox
	DoWindow/K ICARTTICARTDataMgtNotebook
	
End


// *******************************
// Some things are redundant from the function in step 1.  
// Uses the top Table AND the values in the WaveListTextWaveMatrix to make sure the user didn't modify anything important since step 1.
// In particular, check the monotonicity of the independent variable & if it meshes with the data interval.
Function Create_SanitizeData()

	WAVE/T WaveListTextWaveMatrix= root:ICARTTFileFormat:WaveListTextWaveMatrix		// 4 dimensional beast appearing in first tab
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar
	SVAR TableNameStr = root:ICARTTFileFormat:TableNameStr
	NVAR UTCDataStartVar = root:ICARTTFileFormat:UTCDataStartVar
	NVAR DataIntervalVar =root:ICARTTFileFormat:DataIntervalVar
	SVAR MergedSuffixStr =root:ICARTTFileFormat:MergedSuffixStr
	SVAR IndependentVariableNameStr =root:ICARTTFileFormat:IndependentVariableNameStr

	variable idex,numRows, OptionalDescripFlag
	string myWaveStr, tableInfoStr
	
	OptionalDescripFlag=0

 	Wave/Z wav = $"root:ICARTTFileFormat:Data:"+IndependentVariableNameStr // can be in different data folders... string has the full path 	
       if (!WaveExists(wav))		// should never happen
		abort IndependentVariableNameStr+" doesn't seem to exist in the root:ICARTTFileFormat:Data.  Aborting from Create_SanitizeData"
  	 endif
	numRows = numpnts(wav)
	duplicate/o/free wav wavDiff
	wavDiff = wav[p] - wav[p-1]
	wavDiff[0] =wavDiff[1]
	WaveStats/q/m=1 wavDiff
	if (v_min<=0 || V_npnts!=numRows)		// we have duplicate times or we have nans in time
		WaveStats/m=1 wavDiff
		abort "There is a problem of nonmonoticity with the time wave at point number "+num2str(V_minLoc) +" or at another point.  Aborting from Create_SanitizeData"  
	endif 	

	 if ( (DataIntervalVar!=0) && (strlen(MergedSuffixStr)==0)  ) // Not start -stop type data, not merged file	
		if ( (numpnts(wav)!=1) && ((DataIntervalVar !=V_min)  || (DataIntervalVar !=V_max)) )  // easier to think of this on a separate line
			Abort "The data interval and the difference between successive values in the independent wave don't match -  Aborting from Create_SanitizeData"
		endif	
	endif

	for(idex=0;idex<NumVariablesVar;idex+=1)
		
	 	Wave/Z wav = $"root:ICARTTFileFormat:Data:"+WaveListTextWaveMatrix[idex][1]  // can be in different data folders... string has the full path 	
	       if (!WaveExists(wav))		// should never happen
			abort "Wave"+WaveListTextWaveMatrix[idex][1]+" doesn't seem to exist in the root:ICARTTFileFormat:Data.  Aborting from Create_SanitizeData"
	  	 endif
		// can either be another time wave (start stop data) or a dependent parameter			
		// check that all waves have the same number of rows.
		if (dimsize(wav,0) != numRows)
			abort "The number of rows in wave "+NameofWave(wav) +" must be the same as in the first column.  Aborting from Create_SanitizeData"
		endif
		
		if (strlen(WaveListTextWaveMatrix[idex][3])>0)
			OptionalDescripFlag+=1
		endif		

	endfor	// each wave in the table

	if (OptionalDescripFlag>0 && OptionalDescripFlag !=NumVariablesVar)
		abort "If you wish to use optional descriptions, you must do so for every parameter. Aborting from Create_SanitizeData"  	
	endif

	return OptionalDescripFlag
	
End


// *******************************
Function Icartt_CheckOptionalDescriptor()

	WAVE/T WaveListTextWaveMatrix= root:ICARTTFileFormat:WaveListTextWaveMatrix		// 4 dimensional beast appearing in first tab
	NVAR NumVariablesVar = root:ICARTTFileFormat:NumVariablesVar

	variable OptionalDescripFlag, idex

	OptionalDescripFlag=0
	for(idex=0;idex<NumVariablesVar;idex+=1)

		if (strlen(WaveListTextWaveMatrix[idex][3])>0)
			OptionalDescripFlag+=1
		endif		

	endfor	// each wave in the table

	if (OptionalDescripFlag>0 && OptionalDescripFlag !=NumVariablesVar)
		abort "If you wish to use optional descriptions, you must do so for every parameter. Aborting from Create_AppendData2Header"  	
	endif

	return OptionalDescripFlag

End

// returns a formatting value to be put into the first column of the WaveListTextWaveMatrix
//f =0:	General.
//	f =1:	Integer.
//	f =2:	Integer with thousands (e.g., "1,234").
//	f =3:	Decimal (e.g., "1234.56").
//	f =4:	Decimal with comma (e.g., "1,234.56").
//	f =5:	Scientific (e.g., 1.23456e3).
//	f =6:	Date format.
//	f =7:	Time format (always 24 hour time).
//	f =8:	Date&time format (date followed by time).
//	f =9:	Octal.
//	f =10:	Hexadecimal.

// returns t, e, i, d with an optional number. t=3, decimal; i=1, e=5, d=3
Function/s Icartt_FormatStr(formatStr, DigitsStr)	
string formatStr, DigitsStr

	strswitch (formatStr)
		case "t": //  date time format
			return "t"	+selectString(str2num(DigitsStr)>=3,DigitsStr, "0")		// 3 is default. assume no one reports in milliseconds  
			break
		case "8": // date time format
			return "t"	+selectString(str2num(DigitsStr)>=3,DigitsStr, "0")		// 3 is default. assume no one reports in milliseconds  
			break
		case "5": // scientific, exponential format
			return "e"+DigitsStr	
			break	
		case "3": // decimal, no commas format
			return "d"+digitsStr
			break
		case "1": // integer
			return "i"  //+digitsStr
			break
		case "2": // integer with commas - we don't allow
			return "i"  //+digitsStr
			break
		case "x": //  general, but we may still have digits		//1.32A
			return  "x"+digitsStr  //digitsStr
			break
		default :
			return"xx"		
	endswitch

End


Function Icartt_popTable(ctrlName) : ButtonControl
	String ctrlName

	DoWindow/F IcarttFormattingTable
	
	if (V_flag==0)
		Edit/n=IcarttFormattingTable root:IcarttFileFormat:WaveListTextWaveMatrix as "IcarttFormattingTable"
	endif
End

